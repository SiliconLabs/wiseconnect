<?xml version="1.0" encoding="UTF-8"?>
<api xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="api.xsd" device_id="7" device_name="wifi">
    <types>
        <type name="errorcode" datatype="uint16" length="2">
            <description>
                SL_STATUS_OK if successful. Error code otherwise.
            </description>
        </type>
        <type datatype="uint16" name="uint16" length="2">
            <description>
                Unsigned 16-bit integer
            </description>
        </type>
        <type datatype="uint32" name="uint32" length="4">
            <description>
                Unsigned 32-bit integer
            </description>
        </type>
        <type datatype="uint8" name="uint8" length="1">
            <description>
                Unsigned 8-bit integer
            </description>
        </type>
        <type datatype="uint8array" name="uint8array" length="1">
            <description>
                Variable length byte array. The first byte defines the length
                of data that follows, 0 - 255 bytes.
            </description>
        </type>
        <type datatype="uint16array" name="uint16array" length="2">
            <description>
                Variable length byte array. The first two bytes of uint16 type define the length of data that
                follows, 0 - 65535 bytes.
            </description>
        </type>
        <type name="byte_array" datatype="byte_array" length="0">
            <description>
                Fixed length byte array. The length of array must be specified with length attribute of
                derived data type. Note that this is a base type and it shouldn't be used in type
                value of param directly.
            </description>
        </type>
        <type datatype="bd_addr" name="mac_address" length="6">
            <description>
                Bluetooth address
            </description>
        </type>
        <type name="ipv4_address" datatype="uint32" length="4">
            <description>
                Description
            </description>
        </type>
        <type name="ipv6_address" datatype="uuid_128" length="16">
            <description>
                Description
            </description>
        </type>
        <type name="api_ssid" datatype="uint8array" length="32">
            <description>
                Description
            </description>
        </type>
        <type name="bssid" datatype="uint8array" length="6">
            <description>
                Array representing the BSSID (MAC address) consisting of 6 bytes.
            </description>
        </type>
        <type name="api_credential" datatype="uint8array" length="32">
            <description>
                Credential data object.
            </description>
        </type>
    </types>
    <overviewdoc title="Overview">
        <section title="Wi-Fi API Payload">
            The parameters of a xAPI command, response, or event are passed between the application and module in a
            payload. For example, a parameter of uint32 type uses 4 bytes of the payload space. A byte array parameter
            uses one byte to describe the length of the array. Data in the array is copied into the remaining free
            payload space.
        </section>
    </overviewdoc>
    <class name="system" index="0x00" title="System">
        <description>
            Commands and events in this class can be used to access and query the local device.
        </description>
        <event name="boot" index="0x00">
            <description>
                Indicates that the device has started and the radio is ready. This event carries the module build number.
            </description>
            <params>
                <param name="major" type="uint16">
                    <description>
                        Major release version.
                    </description>
                </param>
                <param name="minor" type="uint16">
                    <description>
                        Minor release version.
                    </description>
                </param>
                <param name="patch" type="uint16">
                    <description>
                        Patch release number.
                    </description>
                </param>
            </params>
        </event>
        <event name="error" index="0x01">
            <description>
                Indicates that an error has occurred.
            </description>
            <params>
                <param name="reason" type="errorcode">
                    <description>
                        Error code from module.
                    </description>
                </param>
                <param name="data" type="uint8array">
                    <description>
                        Data related to the error; this field can be empty.
                    </description>
                </param>
            </params>
        </event>
        <command name="hello" index="0x00">
            <description>
                Verifies whether the communication between the host and the device is functional.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="echo" index="0x01">
            <description>
                Verifies whether the communication between the host and the device is functional by echoing the number sent from the host to the module.
            </description>
            <params>
                <param name="number_in" type="uint32">
                    <description>
                        Number to be echoed.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="number_out" type="uint32">
                    <description>
                        Echoed number.
                    </description>
                </param>
            </returns>
        </command>
        <command name="reset" index="0x02" title="reset" no_return="true">
            <description>
                Soft resets device
            </description>
            <params/>
            <returns/>
        </command>
    </class>
    <class name="net_intf" index="0x11" title="Network Interface">
        <description>
            Commands and Events in this class performs essential operations for managing and controlling network interfaces. They handle initialization, configuration, starting, and stopping of these interfaces, ensuring efficient utilization within the system.
            Note: Currently only access point interface is supported.
        </description>
        <enums name="interface" title="interface">
            <description>
                Enumeration of available network interface types.
            </description>
            <enum name="interface_client" value="0x08" title="Client Interface">
                <description>
                    Wi-Fi Client Interface (not currently supported).
                </description>
            </enum>
            <enum name="interface_ap" value="0x10" title="Access Point Interface">
                <description>
                    Wi-Fi Access Point Interface. This is the only currently supported interface for network operations.
                </description>
            </enum>
            <enum name="interface_ethernet" value="0x18" title="Ethernet Interface">
                <description>
                    Ethernet Interface (not currently supported).
                </description>
            </enum>
            <enum name="interface_thread" value="0x20" title="Thread Interface">
                <description>
                    Thread Interface (not currently supported).
                </description>
            </enum>
            <enum name="interface_bluetooth" value="0x28" title="Bluetooth Interface">
                <description>
                    Bluetooth Interface (not currently supported).
                </description>
            </enum>
            <enum name="interface_zwave" value="0x30" title="Z-Wave Interface">
                <description>
                    Z-Wave Interface (not currently supported).
                </description>
            </enum>
        </enums>
        <enums name="profile_id" title="profile_id">
            <description>
                Enumeration of profile IDs for various network profiles.
            </description>
            <enum name="profile_id_default_wifi_ap_profile" value="0" title="Wi-Fi Access Point Default Profile">
                <description>
                    Default profile for Wi-Fi Access Point configuration.
                </description>
            </enum>
        </enums>
        <command name="init" index="0x00">
            <description>
                Initializes the specified network interface, allocating the necessary resources for its operation. After initialization, the user will begin receiving callbacks related to network and Wi-Fi events. For the AP_INTERFACE, this function sets up the Wi-Fi driver, configures the network processor (NWP), and prepares the interface for use.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to be initialized. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="deinit" index="0x01">
            <description>
                De-initializes the specified network interface, releasing any resources allocated during initialization. After this operation, the user will not receive callbacks related to network events. For the AP_INTERFACE, this function ensures proper shutdown of the Wi-Fi driver, performs a soft reset of the NWP, and releases allocated resources.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to be deinitialized. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="up" index="0x02">
            <description>
                Brings the specified network interface up using the given profile ID, enabling the interface for operation.
                By default, profile and credential configurations in sl_net_defaults.h are used by SDK.
                The user can define their profile and credential configurations for an interface by calling APIs in network profile and network credential before calling sl_wifi_net_intf_up API.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to bring up.
                    </description>
                </param>
                <param name="profile_id" type="uint8" enum="net_intf_profile_id">
                    <description>
                        profile ID to use for configuring the network interface.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="down" index="0x03">
            <description>
                Brings the specified network interface down, disabling it and releasing its resources.
                sl_wifi_net_intf_up should be called before this API to ensure the interface is active before attempting to bring it down.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to bring down.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_device_config" index="0x04">
            <description>
                Sets si91x device configuration of the device.
            </description>
            <params>
                <param name="boot_option" type="uint8" enum="net_intf_boot_option">
                    <description>
                        Boot option, which specifies the type of firmware to be loaded for the si91x devices.
                    </description>
                </param>
                <param name="mac_address_octet_0" type="uint8">
                    <description>
                        First octet of the mac address.
                    </description>
                </param>
                <param name="mac_address_octet_1" type="uint8">
                    <description>
                        Second octet of the mac address.
                    </description>
                </param>
                <param name="mac_address_octet_2" type="uint8">
                    <description>
                        Third octet of the mac address.
                    </description>
                </param>
                <param name="mac_address_octet_3" type="uint8">
                    <description>
                        Fourth octet of the mac address.
                    </description>
                </param>
                <param name="mac_address_octet_4" type="uint8">
                    <description>
                        Fifth octet of the mac address.
                    </description>
                </param>
                <param name="mac_address_octet_5" type="uint8">
                    <description>
                        Sixth octet of the mac address.
                    </description>
                </param>
                <param name="band" type="uint8" enum="net_intf_band_mode">
                    <description>
                        si91x Wi-Fi band mode defines the supported frequency bands for the device. At present, only the 2.4 GHz band is supported.
                    </description>
                </param>
                <param name="region_code" type="uint8" enum="net_intf_region_code">
                    <description>
                        si91x region code, which defines the regional settings for the device. Note that Singapore is not currently supported.
                    </description>
                </param>
                <param name="tx_ratio_in_buffer_pool" type="uint8">
                    <description>
                        Specifies the ratio of the transmission (TX) buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="rx_ratio_in_buffer_pool" type="uint8">
                    <description>
                        Specifies the ratio of the reception (RX) buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="global_ratio_in_buffer_pool" type="uint8">
                    <description>
                        Specifies the ratio of the global buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="efuse_data_type" type="uint8">
                    <description>
                        Type of eFuse data need to be read from flash.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_init_status" index="0x06">
            <description>
                Gets device intialization status.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to be initialized. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="is_init" type="uint8">
                    <description>
                        Gets device intialization status. 1 for initialized, 0 for not initialized.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_network_status" index="0x07">
            <description>
                Gets status of network interface.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to be initialized. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="is_up" type="uint8">
                    <description>
                        Status of the network interface. A value of 1 means the network interface is up, and 0 means the network interface is down.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_device_config" index="0x08">
            <description>
                Gets si91x device configuration of the device.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="boot_option" type="uint8" enum="net_intf_boot_option">
                    <description>
                        Specifies the current boot option for the si91x device, which determines the type of firmware to be loaded.
                    </description>
                </param>
                <param name="mac_address_octet_0" type="uint8">
                    <description>
                        The first octet of the device's MAC address.
                    </description>
                </param>
                <param name="mac_address_octet_1" type="uint8">
                    <description>
                        The second octet of the device's MAC address.
                    </description>
                </param>
                <param name="mac_address_octet_2" type="uint8">
                    <description>
                        The third octet of the device's MAC address.
                    </description>
                </param>
                <param name="mac_address_octet_3" type="uint8">
                    <description>
                        The fourth octet of the device's MAC address.
                    </description>
                </param>
                <param name="mac_address_octet_4" type="uint8">
                    <description>
                        The fifth octet of the device's MAC address.
                    </description>
                </param>
                <param name="mac_address_octet_5" type="uint8">
                    <description>
                        The sixth octet of the device's MAC address.
                    </description>
                </param>
                <param name="band" type="uint8" enum="net_intf_band_mode">
                    <description>
                        The current Wi-Fi band mode of the si91x device. This defines the supported frequency bands. Currently, only the 2.4 GHz band is supported.
                    </description>
                </param>
                <param name="region_code" type="uint8" enum="net_intf_region_code">
                    <description>
                        The regional code for the device.
                    </description>
                </param>
                <param name="tx_ratio_in_buffer_pool" type="uint8">
                    <description>
                        The ratio of the transmission (TX) buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="rx_ratio_in_buffer_pool" type="uint8">
                    <description>
                        The ratio of the reception (RX) buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="global_ratio_in_buffer_pool" type="uint8">
                    <description>
                        The ratio of the global buffer allocation in the buffer pool.
                    </description>
                </param>
                <param name="efuse_data_type" type="uint8">
                    <description>
                        The type of eFuse data to be read from the device's flash memory.
                    </description>
                </param>
            </returns>
        </command>
        <enums name="region_code" title="Region Code">
            <enum name="region_code_default_region" value="0x00" title="Factory default region">
                <description>
                    The default region setting applied when the device is initialized to factory settings.
                </description>
            </enum>
            <enum name="region_code_us" value="0x01" title="United States">
                <description>
                    The region code for the United States.
                </description>
            </enum>
            <enum name="region_code_eu" value="0x02" title="European Union">
                <description>
                    The region code for the European Union.
                </description>
            </enum>
            <enum name="region_code_jp" value="0x03" title="Japan">
                <description>
                    The region code for Japan.
                </description>
            </enum>
            <enum name="region_code_world_domain" value="0x04" title="Worldwide domain">
                <description>
                    The worldwide domain region code, which applies global regulatory settings. This setting is used for devices that are not restricted to a specific region and are intended for use across multiple countries.
                </description>
            </enum>
            <enum name="region_code_kr" value="0x05" title="Korea">
                <description>
                    The region code for Korea.
                </description>
            </enum>
            <enum name="region_code_ch" value="0x07" title="China">
                <description>
                    The region code for China.
                </description>
            </enum>
        </enums>
        <event name="network_up_completed" index="0x00">
            <description>
                Indicates that the network interface has successfully completed the network up procedure.
                This event is triggered when the specified network interface is brought up and initialized,
                or if there was an error during the process.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface to be initialized. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
                <param name="is_completed" type="errorcode">
                    <description>
                        Status of the network interface. A value of 1 means the network interface is up, and 0 means the network interface is down.
                    </description>
                </param>
            </params>
        </event>
        <enums name="band_mode" title="band_mode">
            <enum name="band_mode_2_4_ghz" value="0x00" title="Wi-Fi Band 2.4 GHz">
                <description>
                    2.4 GHz Wi-Fi band.
                </description>
            </enum>
            <enum name="band_mode_5_ghz" value="0x01" title="Wi-Fi Band 5 GHz">
                <description>
                    5 GHz Wi-Fi band (currently not supported).
                </description>
            </enum>
            <enum name="band_mode_dual_ghz" value="0x02" title="Wi-Fi Dual Band">
                <description>
                    Both 2.4 GHz and 5 GHz Wi-Fi bands (currently not supported).
                </description>
            </enum>
        </enums>
        <enums name="boot_option" title="Boot Option">
            <enum name="boot_option_load_nwp_fw" value="0x31" title="Load NWP Firmware">
                <description>
                    Specifies the option to load the Network Processor (NWP) firmware during the boot process. This option is used to initialize the device's networking capabilities by loading the appropriate firmware.
                </description>
            </enum>
        </enums>
        <enums name="oper_mode" title="Operation Mode">
            <description>
                si91x operating mode
            </description>
            <enum name="oper_mode_client" value="0x00">
                <description>
                    Wi-Fi personal client mode
                </description>
            </enum>
            <enum name="oper_mode_enterprise_client" value="0x02">
                <description>
                    Wi-Fi enterprise client mode
                </description>
            </enum>
            <enum name="oper_mode_ap" value="0x06">
                <description>
                    Wi-Fi access point mode
                </description>
            </enum>
            <enum name="oper_mode_transceiver" value="0x07">
                <description>
                    Wi-Fi transceiver mode
                </description>
            </enum>
            <enum name="oper_mode_transmit_test" value="0x08">
                <description>
                    Wi-Fi transmit test mode
                </description>
            </enum>
            <enum name="oper_mode_concurrent" value="0x09">
                <description>
                    Wi-Fi concurrent mode
                </description>
            </enum>
        </enums>
        <enums name="coex_mode" title="Coexistence mode">
            <enum name="coex_mode_wlan_only" value="0x00" title="WLAN only mode">
                <description>
                    Wireless local area network (WLAN) only mode
                </description>
            </enum>
            <enum name="coex_mode_ble" value="0x0C" title="BLE mode">
                <description>
                    Bluetooth Low Energy (BLE) only mode, used when power save mode is not needed.
                </description>
            </enum>
            <enum name="coex_mode_wlan_ble" value="0x0D" title="WLAN and BLE mode">
                <description>
                    WLAN and BLE mode
                </description>
            </enum>
        </enums>
        <command name="set_si91x_boot_config" index="0x05" title="Sets si91x boot configuration">
            <description>
                Sets si91x specific boot configuration of the device.
            </description>
            <params>
                <param name="oper_mode" type="uint16" enum="net_intf_oper_mode">
                    <description>
                        The operational mode of the device. This defines how the device functions within the network (e.g., as an access point or station).
                    </description>
                </param>
                <param name="coex_mode" type="uint16" enum="net_intf_coex_mode">
                    <description>
                        The coexistence mode, which specifies how the device manages simultaneous use of multiple wireless technologies (e.g., Wi-Fi and Bluetooth).
                    </description>
                </param>
                <param name="feature_bit_map" type="uint32">
                    <description>
                        A 32-bit feature bit map that specifies the available features on the device. Each bit represents a different device feature.
                    </description>
                </param>
                <param name="tcp_ip_feature_bit_map" type="uint32">
                    <description>
                        A 32-bit bit map that indicates which TCP/IP features are enabled on the device.
                    </description>
                </param>
                <param name="custom_feature_bit_map" type="uint32">
                    <description>
                        A 32-bit custom feature bit map that represents additional features configured for the device beyond standard capabilities.
                    </description>
                </param>
                <param name="ext_custom_feature_bit_map" type="uint32">
                    <description>
                        An extended custom feature bit map providing even further customization options beyond the basic and custom features.
                    </description>
                </param>
                <param name="bt_feature_bit_map" type="uint32">
                    <description>
                        A 32-bit Bluetooth feature bit map that specifies which Bluetooth features are supported and enabled on the device.
                    </description>
                </param>
                <param name="ext_tcp_ip_feature_bit_map" type="uint32">
                    <description>
                        An extended TCP/IP feature bit map, indicating advanced TCP/IP features enabled on the device.
                    </description>
                </param>
                <param name="ble_feature_bit_map" type="uint32">
                    <description>
                        A 32-bit bit map that specifies which BLE features are supported on the device.
                    </description>
                </param>
                <param name="ble_ext_feature_bit_map" type="uint32">
                    <description>
                        An extended BLE feature bit map that allows additional customization of BLE functionality beyond the basic BLE features.
                    </description>
                </param>
                <param name="config_feature_bit_map" type="uint32">
                    <description>
                        A configuration feature bit map that represents various configuration settings for the device, including network and device-specific options.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_si91x_boot_config" index="0x09" title="Gets si91x boot configuration">
            <description>
                Gets si91x specific boot configuration of the device.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="oper_mode" type="uint16" enum="net_intf_oper_mode">
                    <description>
                        The operational mode of the device, which defines how the device functions within the network (e.g., access point, station mode, etc.).
                    </description>
                </param>
                <param name="coex_mode" type="uint16" enum="net_intf_coex_mode">
                    <description>
                        The coexistence mode, which specifies how the device interacts with other wireless technologies (e.g., Bluetooth and Wi-Fi co-existence).
                    </description>
                </param>
                <param name="feature_bit_map" type="uint32">
                    <description>
                        The feature bit map that specifies the available features of the device.
                    </description>
                </param>
                <param name="tcp_ip_feature_bit_map" type="uint32">
                    <description>
                        The TCP/IP feature bit map, which indicates the specific TCP/IP features enabled on the device.
                    </description>
                </param>
                <param name="custom_feature_bit_map" type="uint32">
                    <description>
                        A custom feature bit map representing any additional custom features configured for the device.
                    </description>
                </param>
                <param name="ext_custom_feature_bit_map" type="uint32">
                    <description>
                        An extended custom feature bit map, providing further customization options beyond the basic custom feature set.
                    </description>
                </param>
                <param name="bt_feature_bit_map" type="uint32">
                    <description>
                        The Bluetooth feature bit map, specifying the Bluetooth features supported and enabled on the device.
                    </description>
                </param>
                <param name="ext_tcp_ip_feature_bit_map" type="uint32">
                    <description>
                        An extended TCP/IP feature bit map, representing additional TCP/IP features enabled on the device.
                    </description>
                </param>
                <param name="ble_feature_bit_map" type="uint32">
                    <description>
                        The BLE feature bit map, which indicates the BLE features enabled on the device.
                    </description>
                </param>
                <param name="ble_ext_feature_bit_map" type="uint32">
                    <description>
                        An extended BLE feature bit map.
                    </description>
                </param>
                <param name="config_feature_bit_map" type="uint32">
                    <description>
                        The configuration feature bit map that represents the device's configuration features, including network and device-specific settings.
                    </description>
                </param>
            </returns>
        </command>
    </class>
    <class name="net_profile" index="0x12" title="Network Profile">
        <description>
            Commands and events in this class are described by "profiles" that contain all the information needed to configure a particular interface. Each type of network interface has a unique profile structure to optimally store the relevant information. For example, a Wi-Fi client interface requires an SSID, a security mode, and a passphrase for a security-enabled access point.
        </description>
        <enums name="security_type" title="Wi-Fi Security Types">
            <description>
                Enumeration for various Wi-Fi security types.
            </description>
            <enum name="security_type_open" value="0x00" title="Wi-Fi Open Security">
                <description>
                    Wi-Fi Open security type.
                </description>
            </enum>
            <enum name="security_type_wpa" value="0x01" title="Wi-Fi WPA Security">
                <description>
                    Wi-Fi WPA security type.
                </description>
            </enum>
            <enum name="security_type_wpa2" value="0x02" title="Wi-Fi WPA2 Security">
                <description>
                    Wi-Fi WPA2 security type.
                </description>
            </enum>
            <enum name="security_type_wep" value="0x03" title="Wi-Fi WEP Security">
                <description>
                    Wi-Fi WEP security type.
                </description>
            </enum>
            <enum name="security_type_wpa_enterprise" value="0x04" title="Wi-Fi WPA Enterprise Security">
                <description>
                    Wi-Fi WPA enterprise security type.
                </description>
            </enum>
            <enum name="security_type_wpa2_enterprise" value="0x05" title="Wi-Fi WPA2 Enterprise Security">
                <description>
                    Wi-Fi WPA2 enterprise security type.
                </description>
            </enum>
            <enum name="security_type_wpa_wpa2_mixed" value="0x06" title="Wi-Fi WPA/WPA2 Mixed Security">
                <description>
                    Wi-Fi WPA/WPA2 mixed security type that supports both WPA and WPA2.
                </description>
            </enum>
            <enum name="security_type_wpa3" value="0x07" title="Wi-Fi WPA3 Security">
                <description>
                    Wi-Fi WPA3 security type.
                </description>
            </enum>
            <enum name="security_type_wpa3_transition" value="0x08" title="Wi-Fi WPA3 Transition Security">
                <description>
                    Wi-Fi WPA3 Transition security type (not currently supported in AP mode).
                </description>
            </enum>
            <enum name="security_type_wpa3_enterprise" value="0x09" title="Wi-Fi WPA3 Enterprise Security">
                <description>
                    Wi-Fi WPA3 enterprise security type.
                </description>
            </enum>
            <enum name="security_type_wpa3_transition_enterprise" value="0x0A" title="Wi-Fi WPA3 Transition Enterprise Security">
                <description>
                    Wi-Fi WPA3 Transition enterprise security type.
                </description>
            </enum>
            <enum name="security_type_security_unknown" value="0xFFFF" title="Wi-Fi Unknown Security">
                <description>
                    Wi-Fi Unknown Security type.
                </description>
            </enum>
        </enums>
        <enums name="encryption_type" title="Wi-Fi Encryption Types">
            <description>
                Enumeration for various Wi-Fi encryption types.
            </description>
            <enum name="encryption_type_default" value="0x00" title="Default Wi-Fi Encryption">
                <description>
                    Default Wi-Fi encryption.
                </description>
            </enum>
            <enum name="encryption_type_no" value="0x01" title="No Wi-Fi Encryption">
                <description>
                    Wi-Fi with no Encryption (not currently supported in STA mode).
                </description>
            </enum>
            <enum name="encryption_type_wep" value="0x02" title="WEP Wi-Fi Encryption">
                <description>
                    Wi-Fi with WEP Encryption (not currently supported in STA mode).
                </description>
            </enum>
            <enum name="encryption_type_tkip" value="0x03" title="TKIP Wi-Fi Encryption">
                <description>
                    Wi-Fi with TKIP Encryption (not currently supported in STA mode).
                </description>
            </enum>
            <enum name="encryption_type_ccmp" value="0x04" title="CCMP Wi-Fi Encryption">
                <description>
                    Wi-Fi with CCMP Encryption.
                </description>
            </enum>
            <enum name="encryption_type_eap_tls" value="0x05" title="Enterprise TLS Wi-Fi Encryption">
                <description>
                    Wi-Fi with Enterprise TLS Encryption.
                </description>
            </enum>
            <enum name="encryption_type_eap_ttls" value="0x06" title="Enterprise TTLS Wi-Fi Encryption">
                <description>
                    Wi-Fi with Enterprise TTLS Encryption.
                </description>
            </enum>
            <enum name="encryption_type_eap_fast" value="0x07" title="Enterprise FAST Wi-Fi Encryption">
                <description>
                    Wi-Fi with Enterprise FAST Encryption.
                </description>
            </enum>
            <enum name="encryption_type_peap_mschapv2" value="0x08" title="Enterprise PEAP Wi-Fi Encryption">
                <description>
                    Wi-Fi with Enterprise PEAP Encryption.
                </description>
            </enum>
            <enum name="encryption_type_eap_leap" value="0x09" title="Enterprise LEAP Wi-Fi Encryption">
                <description>
                    Wi-Fi with Enterprise LEAP Encryption.
                </description>
            </enum>
        </enums>
        <enums name="rate_protocol" title="Wi-Fi Rate Protocols">
            <description>
                Enumeration for different Wi-Fi rate protocols.
            </description>
            <enum name="rate_protocol_b_only" value="0x00" title="802.11b Only">
                <description>
                    802.11b rates only.
                </description>
            </enum>
            <enum name="rate_protocol_g_only" value="0x01" title="802.11g Only">
                <description>
                    802.11g rates only.
                </description>
            </enum>
            <enum name="rate_protocol_n_only" value="0x02" title="802.11n Only">
                <description>
                    802.11n rates only.
                </description>
            </enum>
            <enum name="rate_protocol_ac_only" value="0x03" title="802.11ac Only">
                <description>
                    802.11ac rates only (not currently supported).
                </description>
            </enum>
            <enum name="rate_protocol_ax_only" value="0x04" title="802.11ax Only">
                <description>
                    802.11ax rates only.
                </description>
            </enum>
            <enum name="rate_protocol_auto" value="0x05" title="Automatic Rate Selection">
                <description>
                    Automatic rate selection.
                </description>
            </enum>
        </enums>
        <enums name="ap_option" title="Wi-Fi Access Point Flags">
            <enum name="ap_option_enable_hidden_ssid" value="0x01" title="Hidden SSID">
                <description>
                    Hide the SSID of the Access Point.
                </description>
            </enum>
            <enum name="ap_option_disable_hidden_ssid" value="0x00" title="Hidden SSID">
                <description>
                    Display the SSID of the Access Point.
                </description>
            </enum>
        </enums>
        <enums name="credential_id" title="Network Credential IDs">
            <enum name="credential_id_invalid" value="0x00" title="Invalid Credential ID">
                <description>
                    Invalid Credential ID.
                </description>
            </enum>
            <enum name="credential_id_default_wifi_client" value="0x01" title="Wi-Fi Client Credential ID">
                <description>
                    Default Wi-Fi Client Credential ID. By default, uses default_wifi_client_credential from sl_net_default_values.h, which can be overridden using sl_net_set_credential.
                </description>
            </enum>
            <enum name="credential_id_default_wifi_ap" value="0x02" title="Wi-Fi Access Point Credential ID">
                <description>
                    Default Wi-Fi Access Point Credential ID. By default, uses default_wifi_ap_credential from sl_net_default_values.h, which can be overridden using sl_net_set_credential.
                </description>
            </enum>
            <enum name="credential_id_wifi_eap_client" value="0x03" title="Wi-Fi EAP Client Credential ID">
                <description>
                    Wi-Fi EAP Client Credential ID.
                </description>
            </enum>
            <enum name="credential_id_wifi_eap_server" value="0x04" title="Wi-Fi EAP Server Credential ID">
                <description>
                    Wi-Fi EAP Server Credential ID.
                </description>
            </enum>
            <enum name="credential_id_user" value="0x05" title="User Credential ID">
                <description>
                    User Credential ID.
                </description>
            </enum>
            <enum name="credential_id_tls_client" value="0x100" title="TLS Client Credential ID">
                <description>
                    TLS Client Credential ID.
                </description>
            </enum>
            <enum name="credential_id_tls_server" value="0x200" title="TLS Server Credential ID">
                <description>
                    TLS Server Credential ID.
                </description>
            </enum>
            <enum name="credential_id_mqtt_server" value="0x300" title="MQTT Server Credential ID">
                <description>
                    MQTT Server Credential ID.
                </description>
            </enum>
            <enum name="credential_id_mqtt_client" value="0x400" title="MQTT Client Credential ID">
                <description>
                    MQTT Client Credential ID.
                </description>
            </enum>
            <enum name="credential_id_http_server" value="0x500" title="HTTP Server Credential ID">
                <description>
                    HTTP Server Credential ID.
                </description>
            </enum>
            <enum name="credential_id_http_client" value="0x600" title="HTTP Client Credential ID">
                <description>
                    HTTP Client Credential ID.
                </description>
            </enum>
        </enums>
        <enums name="ap_keepalive_type" title="AP Keep-Alive Types">
            <enum name="ap_keepalive_type_disable" value="0x00" title="Disable Keepalive">
                <description>
                    Disables the keepalive functionality.
                </description>
            </enum>
            <enum name="ap_keepalive_type_deauth_based" value="0x01" title="Deauth-Based Keepalive">
                <description>
                    The AP utilizes keepalive functionality based on received packets from its stations. If no packets are received from a station within the keepalive timeout period, the AP disconnects that station.
                </description>
            </enum>
            <enum name="ap_keepalive_type_null_based" value="0x03" title="Null-Based Keepalive">
                <description>
                    The AP performs keepalive by sending a NULL DATA packet to the station. If an ACK is not received from the station after a specific number of retries, the AP will disconnect the station.
                </description>
            </enum>
        </enums>
        <enums name="is_11n" title="11n Enable">
            <enum name="is_11n_enabled" value="0x01" title="11n Enabled">
                <description>
                    Indicates whether 802.11n is enabled.
                </description>
            </enum>
            <enum name="is_11n_disable" value="0x00" title="11n Disable">
                <description>
                    Indicates whether 802.11n is disable.
                </description>
            </enum>
        </enums>
        <enums name="tdi" title="Wi-Fi Transition Disable Indication (TDI)">
            <enum name="tdi_none" value="0x00" title="No Transition Disable">
                <description>
                    Allows stations to transition within the AP network.
                </description>
            </enum>
            <enum name="tdi_sae" value="0x10" title="WPA3-SAE Transition Disable">
                <description>
                    Disallows stations from transitioning within the AP network and only allows connections with WPA3-SAE security mode.
                </description>
            </enum>
        </enums>
        <enums name="band" title="Wi-Fi Bands">
            <enum name="band_mode_auto" value="0x00" title="Wi-Fi Band Auto">
                <description>
                    Wi-Fi Band Auto.
                </description>
            </enum>
            <enum name="band_mode_900_mhz" value="0x01" title="Wi-Fi Band 900 MHz">
                <description>
                    Wi-Fi Band 900 MHz (not currently supported).
                </description>
            </enum>
            <enum name="band_mode_2_4_ghz" value="0x02" title="Wi-Fi Band 2.4 GHz">
                <description>
                    Wi-Fi Band 2.4 GHz.
                </description>
            </enum>
            <enum name="band_mode_5_ghz" value="0x03" title="Wi-Fi Band 5 GHz">
                <description>
                    Wi-Fi Band 5 GHz (not currently supported).
                </description>
            </enum>
            <enum name="band_mode_6_ghz" value="0x04" title="Wi-Fi Band 6 GHz">
                <description>
                    Wi-Fi Band 6 GHz (not currently supported).
                </description>
            </enum>
            <enum name="band_mode_60_ghz" value="0x05" title="Wi-Fi Band 60 GHz">
                <description>
                    Wi-Fi Band 60 GHz (not currently supported).
                </description>
            </enum>
        </enums>
        <enums name="bandwidth" title="Wi-Fi Bandwidth">
            <enum name="bandwidth_mode_auto" value="0x00" title="Wi-Fi Bandwidth Auto">
                <description>
                    Wi-Fi Bandwidth Auto.
                </description>
            </enum>
            <enum name="bandwidth_mode_10_mhz" value="0x00" title="Wi-Fi Bandwidth 10 MHz">
                <description>
                    Wi-Fi Bandwidth 10 MHz (not currently supported).
                </description>
            </enum>
            <enum name="bandwidth_mode_20_mhz" value="0x01" title="Wi-Fi Bandwidth 20 MHz">
                <description>
                    Wi-Fi Bandwidth 20 MHz.
                </description>
            </enum>
            <enum name="bandwidth_mode_40_mhz" value="0x02" title="Wi-Fi Bandwidth 40 MHz">
                <description>
                    Wi-Fi Bandwidth 40 MHz (not currently supported).
                </description>
            </enum>
            <enum name="bandwidth_mode_80_mhz" value="0x03" title="Wi-Fi Bandwidth 80 MHz">
                <description>
                    Wi-Fi Bandwidth 80 MHz (not currently supported).
                </description>
            </enum>
            <enum name="bandwidth_mode_160_mhz" value="0x04" title="Wi-Fi Bandwidth 160 MHz">
                <description>
                    Wi-Fi Bandwidth 160 MHz (not currently supported).
                </description>
            </enum>
        </enums>
        <enums name="channel" title="Wi-Fi Channels">
            <enum name="channel_auto" value="0x00" title="Wi-Fi Channel Auto">
                <description>
                    Wi-Fi Channel Auto.
                </description>
            </enum>
        </enums>
        <enums name="ip_management" title="IP Management Modes">
            <enum name="ip_management_static_ip" value="0x01" title="Static IP">
                <description>
                    Assign STATIC IP address to an interface.
                </description>
            </enum>
            <enum name="ip_management_dhcp" value="0x02" title="DHCP">
                <description>
                    Assign IP address to an interface dynamically using DHCP.
                </description>
            </enum>
            <enum name="ip_management_link_local" value="0x03" title="Link-Local">
                <description>
                    Assign IP address using link-local addressing.
                </description>
            </enum>
        </enums>
        <enums name="ip_address_type" title="IP Address Types">
            <enum name="ip_address_type_ipv4" value="0x04" title="IPv4 Address">
                <description>
                    IPv4 address.
                </description>
            </enum>
            <enum name="ip_address_type_ipv6" value="0x08" title="IPv6 Address (Unspecified)">
                <description>
                    IPv6 address, unspecified sub-type.
                </description>
            </enum>
            <enum name="ip_address_type_ipv6_link_local" value="0x09" title="IPv6 Link-Local Address">
                <description>
                    IPv6 link-local address.
                </description>
            </enum>
            <enum name="ip_address_type_ipv6_site_local" value="0x0A" title="IPv6 Site-Local Address">
                <description>
                    IPv6 site-local address.
                </description>
            </enum>
            <enum name="ip_address_type_ipv6_global" value="0x0B" title="IPv6 Global Address">
                <description>
                    IPv6 global address.
                </description>
            </enum>
            <enum name="ip_address_type_invalid_ip" value="0x00" title="Invalid IP">
                <description>
                    This enumeration value represents an invalid IP address.
                </description>
            </enum>
        </enums>
        <command name="set" index="0x00">
            <description>
                Stores the network profile data, such as Wi-Fi credentials and network credentials, for the specified interface. The profile can later be used to bring the interface up with the stored settings. Users can use the ID to store multiple profiles for the same interface and pass the ID to different APIs.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
                <param name="profile_id" type="uint8" enum="net_intf_profile_id">
                    <description>
                        Profile ID to use for configuring the network interface.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="delete" index="0x02">
            <description>
                Deletes the network profile data for the specified interface and profile ID.
                Once deleted, the profile cannot be used to bring the interface up.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API.
            </description>
            <params>
                <param name="net_interface" type="uint8" enum="net_intf_interface">
                    <description>
                        Network interface. Currently only AP_INTERFACE is supported.
                    </description>
                </param>
                <param name="profile_id" type="uint8" enum="net_intf_profile_id">
                    <description>
                        Profile ID to use for configuring the network interface.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_ssid" index="0x03">
            <description>
                Sets the SSID for the specified network interface.
                Note: Please ensure that the SSID should be provided in hexadecimal format.
            </description>
            <params>
                <param name="ssid" type="api_ssid">
                    <description>
                        SSID to assign to the access point.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_config" index="0x04">
            <description>
                Sets the configuration for the specified network interface.
            </description>
            <params>
                <param name="ap_security" type="uint16" enum="net_profile_security_type">
                    <description>
                        Security type for the access point.
                    </description>
                </param>
                <param name="ap_encryption" type="uint8" enum="net_profile_encryption_type">
                    <description>
                        Encryption type for the access point.
                    </description>
                </param>
                <param name="ap_rate_protocol" type="uint8" enum="net_profile_rate_protocol">
                    <description>
                        Rate protocol for the access point.
                    </description>
                </param>
                <param name="ap_options" type="uint8" enum="net_profile_ap_option">
                    <description>
                        Additional configuration options for the access point.
                    </description>
                </param>
                <param name="ap_credential_id" type="uint32" enum="net_profile_credential_id">
                    <description>
                        ID for the credentials associated with the access point.
                    </description>
                </param>
                <param name="ap_keepalive_type" type="uint8" enum="net_profile_ap_keepalive_type">
                    <description>
                        Type of keepalive mechanism to use.
                    </description>
                </param>
                <param name="ap_beacon_interval" type="uint16">
                    <description>
                        Beacon interval of the access point in milliseconds and defaut value is 100 ms.
                    </description>
                </param>
                <param name="ap_client_idle_timeout" type="uint32">
                    <description>
                        Duration in milliseconds to disconnect idle clients default value is 255 ms.
                    </description>
                </param>
                <param name="ap_dtim_beacon_count" type="uint16">
                    <description>
                        Number of beacons per DTIM defaut value is 3
                    </description>
                </param>
                <param name="ap_maximum_clients" type="uint8">
                    <description>
                        Maximum number of associated clients defaut value is 3
                    </description>
                </param>
                <param name="ap_beacon_stop" type="uint8">
                    <description>
                        Flag to stop beaconing when there are no associated clients defaut value is 0 (disabled).
                    </description>
                </param>
                <param name="ap_tdi" type="uint8" enum="net_profile_tdi">
                    <description>
                        Transition Disable Indication settings.
                    </description>
                </param>
                <param name="ap_is_11n_enabled" type="uint8" enum="net_profile_is_11n">
                    <description>
                        Indicates whether 802.11n is enabled.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_channel" index="0x05">
            <description>
                Sets the channel for the specified network interface.
            </description>
            <params>
                <param name="channel" type="uint16" enum="net_profile_channel">
                    <description>
                        Channel number to set for the access point.
                    </description>
                </param>
                <param name="band" type="uint8" enum="net_profile_band">
                    <description>
                        Frequency band to use (e.g., 2.4 GHz, 5 GHz).
                    </description>
                </param>
                <param name="bandwidth" type="uint8" enum="net_profile_bandwidth">
                    <description>
                        Bandwidth to use (e.g., 20 MHz, 40 MHz).
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_ip_config" index="0x06">
            <description>
                Configures the IP management settings for the specified network interface.
                Note: Please ensure that sl_wifi_net_intf_up should be called before this API.
            </description>
            <params>
                <param name="mode" type="uint8" enum="net_profile_ip_management">
                    <description>
                        IP management mode to use (e.g., Static, DHCP).
                    </description>
                </param>
                <param name="type" type="uint8" enum="net_profile_ip_address_type">
                    <description>
                        Type of IP address to assign (e.g., IPv4, IPv6).
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_ipv4_config" index="0x07">
            <description>
                Configures the IPv4 settings for the specified network interface.
                Note: Please ensure that sl_wifi_net_intf_up should be called before this API.
            </description>
            <params>
                <param name="ipv4_octet_1" type="uint8">
                    <description>
                        First octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_2" type="uint8">
                    <description>
                        Second octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_3" type="uint8">
                    <description>
                        Third octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_4" type="uint8">
                    <description>
                        Fourth octet of the IPv4 address.
                    </description>
                </param>
                <param name="gateway_octet_1" type="uint8">
                    <description>
                        First octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_2" type="uint8">
                    <description>
                        Second octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_3" type="uint8">
                    <description>
                        Third octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_4" type="uint8">
                    <description>
                        Fourth octet of the gateway address.
                    </description>
                </param>
                <param name="netmask_octet_1" type="uint8">
                    <description>
                        First octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_2" type="uint8">
                    <description>
                        Second octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_3" type="uint8">
                    <description>
                        Third octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_4" type="uint8">
                    <description>
                        Fourth octet of the subnet mask.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="set_ap_ipv6_config" index="0x08">
            <description>
                Configures the IPv6 settings for the specified network interface.
                Note: Please ensure that sl_wifi_net_intf_up should be called before this API.
            </description>
            <params>
                <param name="link_local_address_octet_1" type="uint8">
                    <description>
                        First octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_2" type="uint8">
                    <description>
                        Second octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_3" type="uint8">
                    <description>
                        Third octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_4" type="uint8">
                    <description>
                        Fourth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_5" type="uint8">
                    <description>
                        Fifth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_6" type="uint8">
                    <description>
                        Sixth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_7" type="uint8">
                    <description>
                        Seventh octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_8" type="uint8">
                    <description>
                        Eighth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_9" type="uint8">
                    <description>
                        Ninth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_10" type="uint8">
                    <description>
                        Tenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_13" type="uint8">
                    <description>
                        The thirteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_14" type="uint8">
                    <description>
                        The fourteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_15" type="uint8">
                    <description>
                        The fifteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_16" type="uint8">
                    <description>
                        The sixteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_1" type="uint8">
                    <description>
                        First octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_2" type="uint8">
                    <description>
                        Second octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_3" type="uint8">
                    <description>
                        Third octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_4" type="uint8">
                    <description>
                        Fourth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_5" type="uint8">
                    <description>
                        Fifth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_6" type="uint8">
                    <description>
                        Sixth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_7" type="uint8">
                    <description>
                        Seventh octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_8" type="uint8">
                    <description>
                        Eighth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_9" type="uint8">
                    <description>
                        Ninth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_10" type="uint8">
                    <description>
                        Tenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_13" type="uint8">
                    <description>
                        Thirteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_14" type="uint8">
                    <description>
                        Fourteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_15" type="uint8">
                    <description>
                        Fifteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_16" type="uint8">
                    <description>
                        Sixteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="gateway_octet_1" type="uint8">
                    <description>
                        First octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_2" type="uint8">
                    <description>
                        Second octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_3" type="uint8">
                    <description>
                        Third octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_4" type="uint8">
                    <description>
                        Fourth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_5" type="uint8">
                    <description>
                        Fifth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_6" type="uint8">
                    <description>
                        Sixth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_7" type="uint8">
                    <description>
                        Seventh octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_8" type="uint8">
                    <description>
                        Eighth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_9" type="uint8">
                    <description>
                        Ninth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_10" type="uint8">
                    <description>
                        Tenth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_13" type="uint8">
                    <description>
                        Thirteenth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_14" type="uint8">
                    <description>
                        Fourteenth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_15" type="uint8">
                    <description>
                        Fifteenth octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_16" type="uint8">
                    <description>
                        Sixteenth octet of the gateway address.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_ssid" index="0x01">
            <description>
                Retrieves the SSID (Service Set Identifier) of the Access Point (AP) currently in use or connected to.
                This command can be used to obtain the name of the wireless network, which may be useful for monitoring
                or diagnostic purposes.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="ssid" type="api_ssid">
                    <description>
                        SSID of the current Access Point as a string. This is the name of the Wi-Fi network to which
                        the device is connected or attempting to connect.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_config" index="0x09">
            <description>
                Retrieves the configuration settings for the specified access point (AP) network interface, including security, encryption, rate protocol, options, credentials, and other settings related to performance and client management.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="ap_security" type="uint16" enum="net_profile_security_type">
                    <description>
                        Security type configured for the access point.
                    </description>
                </param>
                <param name="ap_encryption" type="uint8" enum="net_profile_encryption_type">
                    <description>
                        Encryption type in use by the access point.
                    </description>
                </param>
                <param name="ap_rate_protocol" type="uint8" enum="net_profile_rate_protocol">
                    <description>
                        Rate protocol configured for the access point.
                    </description>
                </param>
                <param name="ap_options" type="uint8" enum="net_profile_ap_option">
                    <description>
                        Additional configuration options set for the access point.
                    </description>
                </param>
                <param name="ap_credential_id" type="uint32" enum="net_profile_credential_id">
                    <description>
                        ID for the credentials associated with the access point.
                    </description>
                </param>
                <param name="ap_keepalive_type" type="uint8" enum="net_profile_ap_keepalive_type">
                    <description>
                        Type of keepalive mechanism used.
                    </description>
                </param>
                <param name="ap_beacon_interval" type="uint16">
                    <description>
                        Beacon interval of the access point in milliseconds; default is 100 ms.
                    </description>
                </param>
                <param name="ap_client_idle_timeout" type="uint32">
                    <description>
                        Time in milliseconds to disconnect idle clients; default is 255 ms.
                    </description>
                </param>
                <param name="ap_dtim_beacon_count" type="uint16">
                    <description>
                        Number of beacons per DTIM; default is 3.
                    </description>
                </param>
                <param name="ap_maximum_clients" type="uint8">
                    <description>
                        Maximum number of clients allowed to associate; default is 3.
                    </description>
                </param>
                <param name="ap_beacon_stop" type="uint8">
                    <description>
                        Flag indicating if beaconing stops when no clients are connected; default is 0 (disabled).
                    </description>
                </param>
                <param name="ap_tdi" type="uint8" enum="net_profile_tdi">
                    <description>
                        Transition Disable Indication settings in use.
                    </description>
                </param>
                <param name="ap_is_11n_enabled" type="uint8" enum="net_profile_is_11n">
                    <description>
                        Indicates if 802.11n protocol is enabled on the access point.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_channel" index="0x0A">
            <description>
                Retrieves the current channel settings for the specified access point (AP) network interface, including the channel number, frequency band, and bandwidth.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="channel" type="uint16" enum="net_profile_channel">
                    <description>
                        Current channel number set for the access point.
                    </description>
                </param>
                <param name="band" type="uint8" enum="net_profile_band">
                    <description>
                        Frequency band in use by the access point (e.g., 2.4 GHz, 5 GHz).
                    </description>
                </param>
                <param name="bandwidth" type="uint8" enum="net_profile_bandwidth">
                    <description>
                        Bandwidth in use by the access point (e.g., 20 MHz, 40 MHz).
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_ip_config" index="0x0B">
            <description>
                Retrieves the IP management settings for the specified access point (AP) network interface, including IP mode and address type.
                Note: Ensure that sl_wifi_net_intf_up is called before executing this command.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="mode" type="uint8" enum="net_profile_ip_management">
                    <description>
                        Current IP management mode in use (e.g., Static, DHCP).
                    </description>
                </param>
                <param name="type" type="uint8" enum="net_profile_ip_address_type">
                    <description>
                        Type of IP address assigned (e.g., IPv4, IPv6).
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_ipv4_config" index="0x0C">
            <description>
                Retrieves the IPv4 configuration settings (IP address, gateway, and subnet mask) for the specified network interface.
                Note: Ensure that sl_wifi_net_intf_up is called before using this command.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="ipv4_octet_1" type="uint8">
                    <description>
                        First octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_2" type="uint8">
                    <description>
                        Second octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_3" type="uint8">
                    <description>
                        Third octet of the IPv4 address.
                    </description>
                </param>
                <param name="ipv4_octet_4" type="uint8">
                    <description>
                        Fourth octet of the IPv4 address.
                    </description>
                </param>
                <param name="gateway_octet_1" type="uint8">
                    <description>
                        First octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_2" type="uint8">
                    <description>
                        Second octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_3" type="uint8">
                    <description>
                        Third octet of the gateway address.
                    </description>
                </param>
                <param name="gateway_octet_4" type="uint8">
                    <description>
                        Fourth octet of the gateway address.
                    </description>
                </param>
                <param name="netmask_octet_1" type="uint8">
                    <description>
                        First octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_2" type="uint8">
                    <description>
                        Second octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_3" type="uint8">
                    <description>
                        Third octet of the subnet mask.
                    </description>
                </param>
                <param name="netmask_octet_4" type="uint8">
                    <description>
                        Fourth octet of the subnet mask.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get_ap_ipv6_config" index="0x0D">
            <description>
                Retrieves the IPv6 configuration settings, including link-local and global addresses, as well as the gateway address.
                Note: Ensure that sl_wifi_net_intf_up is called before using this command.
            </description>
            <params/>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="link_local_address_octet_1" type="uint8">
                    <description>
                        First octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_2" type="uint8">
                    <description>
                        Second octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_3" type="uint8">
                    <description>
                        Third octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_4" type="uint8">
                    <description>
                        Fourth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_5" type="uint8">
                    <description>
                        Fifth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_6" type="uint8">
                    <description>
                        Sixth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_7" type="uint8">
                    <description>
                        Seventh octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_8" type="uint8">
                    <description>
                        Eighth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_9" type="uint8">
                    <description>
                        Ninth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_10" type="uint8">
                    <description>
                        Tenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_13" type="uint8">
                    <description>
                        Thirteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_14" type="uint8">
                    <description>
                        Fourteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_15" type="uint8">
                    <description>
                        Fifteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="link_local_address_octet_16" type="uint8">
                    <description>
                        Sixteenth octet of the link-local IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_1" type="uint8">
                    <description>
                        First octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_2" type="uint8">
                    <description>
                        Second octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_3" type="uint8">
                    <description>
                        Third octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_4" type="uint8">
                    <description>
                        Fourth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_5" type="uint8">
                    <description>
                        Fifth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_6" type="uint8">
                    <description>
                        Sixth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_7" type="uint8">
                    <description>
                        Seventh octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_8" type="uint8">
                    <description>
                        Eighth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_9" type="uint8">
                    <description>
                        Ninth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_10" type="uint8">
                    <description>
                        Tenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_13" type="uint8">
                    <description>
                        Thirteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_14" type="uint8">
                    <description>
                        Fourteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_15" type="uint8">
                    <description>
                        Fifteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="global_address_octet_16" type="uint8">
                    <description>
                        Sixteenth octet of the global IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_1" type="uint8">
                    <description>
                        First octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_2" type="uint8">
                    <description>
                        Second octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_3" type="uint8">
                    <description>
                        Third octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_4" type="uint8">
                    <description>
                        Fourth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_5" type="uint8">
                    <description>
                        Fifth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_6" type="uint8">
                    <description>
                        Sixth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_7" type="uint8">
                    <description>
                        Seventh octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_8" type="uint8">
                    <description>
                        Eighth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_9" type="uint8">
                    <description>
                        Ninth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_10" type="uint8">
                    <description>
                        Tenth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_11" type="uint8">
                    <description>
                        Eleventh octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_12" type="uint8">
                    <description>
                        Twelfth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_13" type="uint8">
                    <description>
                        Thirteenth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_14" type="uint8">
                    <description>
                        Fourteenth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_15" type="uint8">
                    <description>
                        Fifteenth octet of the gateway IPv6 address.
                    </description>
                </param>
                <param name="gateway_address_octet_16" type="uint8">
                    <description>
                        Sixteenth octet of the gateway IPv6 address.
                    </description>
                </param>
            </returns>
        </command>
    </class>
    <class name="ap" index="0x05" title="Access point">
        <description>
            Commands and events in this class can be used to implement a Wi-Fi Access Point (AP).
        </description>
        <enums name="wifi_event_group" title="Wi-Fi Event Group">
            <description>
                This enumeration defines various groups of Wi-Fi-related events, each representing a distinct category of actions or status
                changes within the Wi-Fi system. These groups cover events such as scanning for networks, joining or disconnecting from a
                network, receiving packets, handling statistics, firmware updates, client connections, and fail indications. Certain event
                groups may not be supported in the current release, but are included for future implementation or diagnostic purposes.
            </description>
            <!-- <enum name="SCAN_RESULT_EVENTS" value="0x00" title="Wi-Fi Scan Result Events">
                <description>Event group for Wi-Fi scan results</description>
            </enum>
            <enum name="JOIN_EVENTS" value="0x01" title="Wi-Fi Join Events">
                <description>Event group for Wi-Fi join status</description>
            </enum>
            <enum name="RX_PACKET_EVENTS" value="0x02" title="Wi-Fi RX Packet Events (not currently supported)">
                <description>Event group for Wi-Fi received packet. This feature is not supported in current release</description>
            </enum>
            <enum name="COMMAND_RESPONSE_EVENTS" value="0x03" title="Wi-Fi Command Response Events (not currently supported)">
                <description>Event group for Wi-Fi command response. This feature is not supported in current release</description>
            </enum>
            <enum name="STATS_RESPONSE_EVENTS" value="0x04" title="Wi-Fi Statistics Response Events">
                <description>Event group for Wi-Fi statistics response</description>
            </enum>
            <enum name="HTTP_OTA_FW_UPDATE_EVENTS" value="0x05" title="Wi-Fi OTA Firmware Update Events">
                <description>Event group for Wi-Fi OTA firmware update status via HTTP</description>
            </enum>
            <enum name="NETWORK_DOWN_EVENTS" value="0x06" title="Wi-Fi Network Down Events (not currently supported)">
                <description>Event group for Wi-Fi network down. This feature is not supported in current release</description>
            </enum>
            <enum name="NETWORK_UP_EVENTS" value="0x07" title="Wi-Fi Network Up Events (not currently supported)">
                <description>Event group for Wi-Fi network up. This feature is not supported in current release</description>
            </enum> -->
            <enum name="wifi_event_group_client_connected" value="0x08" title="Wi-Fi Client Connected Events">
                <description>
                    Event group for Wi-Fi client connected status
                </description>
            </enum>
            <!-- <enum name="TWT_RESPONSE_EVENTS" value="0x09" title="Wi-Fi TWT Response Events">
                <description>Event group for Wi-Fi TWT response</description>
            </enum> -->
            <enum name="wifi_event_group_client_disconnected" value="0x0A" title="Wi-Fi Client Disconnected Events">
                <description>
                    Event group for Wi-Fi client disconnection status
                </description>
            </enum>
            <!-- <enum name="TRANSCEIVER_EVENTS" value="0x0B" title="Wi-Fi Transceiver Events">
                <description>Event group for Wi-Fi transceiver events</description>
            </enum>
            <enum name="EVENT_GROUP_COUNT" value="0x0C" title="Wi-Fi Event Group Count">
                <description>Event group for Wi-Fi maximum default group count. Used internally by SDK</description>
            </enum>
            <enum name="EVENT_FAIL_INDICATION_EVENTS" value="0x80000000" title="Wi-Fi Event Fail Indication Events">
                <description>Event group for Wi-Fi fail indication</description>
            </enum> -->
        </enums>
        <event name="client_connected_event" index="0x00" title="Client connected event">
            <description>
                Indicates a client connection and displays the MAC address of the connected client.
            </description>
            <params>
                <param name="mac_address" type="mac_address">
                    <description>
                        Displays the MAC address of the connected client.
                    </description>
                </param>
            </params>
        </event>
        <event name="client_disconnected_event" index="0x01" title="Client disconnected event">
            <description>
                Indicates a client disconnection and displays the MAC address of the disconnected client.
            </description>
            <params>
                <param name="mac_address" type="mac_address">
                    <description>
                        Displays the MAC address of the disconnected client.
                    </description>
                </param>
            </params>
        </event>
    </class>
    <class name="net_cred" index="0x13" title="Network Credential">
        <description>
            This class provides commands and events, which can be used to manage network credentials, including Wi-Fi client credentials,
            MQTT client credentials, TLS client certificates, and others.
        </description>
        <enums name="credential_id" title="Network Credential ID">
            <description>
                Defines various credential IDs used for different network configurations.
            </description>
            <!-- <enum name="INVALID_CREDENTIAL_ID" value="0x00" title="Invalid Credential ID">
                <description>Invalid Credential ID.</description>
            </enum>
            <enum name="DEFAULT_WIFI_CLIENT_CREDENTIAL_ID" value="0x01" title="Default Wi-Fi Client Credential ID">
                <description>
                    Default Wi-Fi Client Credential ID. 
                    By default, `default_wifi_client_credential` from `sl_net_default_values.h` is used. 
                    The user can override this by setting the credential using `sl_net_set_credential`.
                </description>
            </enum> -->
            <enum name="credential_id_default_wifi_ap" value="0x02" title="Default Wi-Fi AP Credential ID">
                <description>
                    Default Wi-Fi Access Point Credential ID.
                    By default, `default_wifi_ap_credential` from `sl_net_default_values.h` is used.
                    The user can override this by setting the credential using sl_wifi_net_cred_set command.
                </description>
            </enum>
            <!-- <enum name="WIFI_EAP_CLIENT_CREDENTIAL_ID" value="0x03" title="Wi-Fi EAP Client Credential ID">
                <description>Wi-Fi EAP Client Credential ID for EAP authentication.</description>
            </enum>
            <enum name="WIFI_EAP_SERVER_CREDENTIAL_ID" value="0x04" title="Wi-Fi EAP Server Credential ID">
                <description>Wi-Fi EAP Server Credential ID for EAP server authentication.</description>
            </enum>
            <enum name="USER_CREDENTIAL_ID" value="0x05" title="User Credential ID">
                <description>User Credential ID. Allows user-defined credentials.</description>
            </enum>
            <enum name="TLS_CLIENT_CREDENTIAL_START" value="0x0100" title="TLS Client Credential Start">
                <description>Starting point for TLS Client Credential IDs.</description>
            </enum>
            <enum name="TLS_SERVER_CREDENTIAL_START" value="0x0200" title="TLS Server Credential Start">
                <description>TLS Server Credential ID.</description>
            </enum>
            <enum name="MQTT_SERVER_CREDENTIAL_START" value="0x0300" title="MQTT Server Credential Start">
                <description>MQTT Server Credential ID.</description>
            </enum>
            <enum name="MQTT_CLIENT_CREDENTIAL_START" value="0x0400" title="MQTT Client Credential Start">
                <description>MQTT Client Credential ID.</description>
            </enum>
            <enum name="HTTP_SERVER_CREDENTIAL_START" value="0x0500" title="HTTP Server Credential Start">
                <description>HTTP Server Credential ID.</description>
            </enum>
            <enum name="HTTP_CLIENT_CREDENTIAL_START" value="0x0600" title="HTTP Client Credential Start">
                <description>HTTP Client Credential ID.</description>
            </enum> -->
        </enums>
        <enums name="credential_type" title="Credential Type">
            <description>
                Defines various types of credentials used for network authentication and encryption.
            </description>
            <!-- <enum name="INVALID_CREDENTIAL_TYPE" value="0x00" title="Invalid Credential Type">
                <description>Invalid Credential Type.</description>
            </enum> -->
            <enum name="credential_type_psk" value="0x01" title="Wi-Fi PSK Credential">
                <description>
                    Wi-Fi Pre-Shared Key (PSK) Credential.
                </description>
            </enum>
            <!-- <enum name="PMK" value="0x02" title="Wi-Fi PMK Credential">
                <description>Wi-Fi Pairwise Master Key (PMK) Credential.</description>
            </enum>
            <enum name="WEP" value="0x03" title="Wi-Fi WEP Credential">
                <description>Wi-Fi Wired Equivalent Privacy (WEP) Credential.</description>
            </enum>
            <enum name="CERTIFICATE" value="0x04" title="TLS Client Certificate">
                <description>TLS Client Certificate Credential.</description>
            </enum>
            <enum name="PUBLIC_KEY" value="0x05" title="TLS Certificate Public Key">
                <description>TLS Certificate Public Key Credential.</description>
            </enum>
            <enum name="PRIVATE_KEY" value="0x06" title="TLS Certificate Private Key">
                <description>TLS Certificate Private Key Credential.</description>
            </enum>
            <enum name="PACK_FILE" value="0x07" title="EAP Fast Pack File">
                <description>EAP Fast Pack File Credential for EAP authentication.</description>
            </enum>
            <enum name="SIGNING_CERTIFICATE" value="0x08" title="TLS CA Certificate">
                <description>TLS Certificate Authority (CA) Certificate Credential for signing.</description>
            </enum>
            <enum name="HTTP_CLIENT_CREDENTIAL" value="0x09" title="HTTP Client Credential">
                <description>HTTP Client Credential for authentication.</description>
            </enum>
            <enum name="EAP_CLIENT_CREDENTIAL" value="0x0A" title="Wi-Fi EAP Client Credential">
                <description>Wi-Fi EAP (Extensible Authentication Protocol) Client Credential for secure authentication.</description>
            </enum>
            <enum name="MQTT_CLIENT_CREDENTIAL" value="0x0B" title="MQTT Client Credential">
                <description>MQTT Client Credential for secure communication in MQTT protocol.</description>
            </enum> -->
        </enums>
        <command name="set" index="0x00">
            <description>
                Sets network credential including client credentials, certificates, and keys.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API. Additionally, remember that the SSID and credentials should be provided in hexadecimal format.
            </description>
            <params>
                <param name="id" type="uint32" enum="net_cred_credential_id">
                    <description>
                        Network credential identifier.
                    </description>
                </param>
                <param name="type" type="uint32" enum="net_cred_credential_type">
                    <description>
                        Network credential type.
                    </description>
                </param>
                <param name="credential" type="api_credential">
                    <description>
                        Credential data object.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
        <command name="get" index="0x01">
            <description>
                Retrieves stored network credential.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API.
            </description>
            <params>
                <param name="id" type="uint32" enum="net_cred_credential_id">
                    <description>
                        Network credential identifier.
                    </description>
                </param>
                <param name="type" type="uint32" enum="net_cred_credential_type">
                    <description>
                        Network credential type.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
                <param name="credential_length" type="uint32">
                    <description>
                        Number of bytes available at credential.
                    </description>
                </param>
                <param name="credential" type="api_credential">
                    <description>
                        Credential data object.
                    </description>
                </param>
            </returns>
        </command>
        <command name="delete" index="0x02">
            <description>
                Deletes stored network credential data for the specified credential ID and type.
                Note: Please ensure that sl_wifi_net_intf_init is called before using this API.
            </description>
            <params>
                <param name="id" type="uint32" enum="net_cred_credential_id">
                    <description>
                        Network credential identifier.
                    </description>
                </param>
                <param name="type" type="uint32" enum="net_cred_credential_type">
                    <description>
                        Network credential type.
                    </description>
                </param>
            </params>
            <returns>
                <param name="result" type="errorcode">
                    <description>
                        Result of the command.
                    </description>
                </param>
            </returns>
        </command>
    </class>
</api>