{%- set include_app_layer = "true" -%}
 /********************************************************************************
 * @file  app_{{ data.device_name.lower() }}_api.h
 * @brief APP_{{ data.device_name.upper() }}_API command declarations
 *******************************************************************************
 * # License
 * <b>Copyright 2025 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/
{% set HEADER_GUARD_DEFINE = 'APP_' + data.device_name.upper() + '_API_H' %}
#ifndef {{ HEADER_GUARD_DEFINE }}
#define {{ HEADER_GUARD_DEFINE }}

#ifdef __cplusplus
extern "C" {
#endif

#include <string.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include "sl_status.h"
#include "app_xapi.h"
{% block component_includes -%}
{% endblock -%}

{%- import 'templates/wifi_common.ht' as common -%}
{%- block device_specific_macros -%}
{%- endblock %}

{% for type in data.types.type %}
{%- if type.datatype == "byte_array" and type.name != "byte_array" %}
/**
 * @brief {{ type.description }}
 */
typedef struct {
  uint8_t data[{{ type.length }}]; /**< {{ type.description }} */
} {{ type.c_datatype }};
{% endif %}
{%- endfor %}

{% for cls in classes %}
/**
{{- common.start_restricted_block(cls.restricted, "
 * " + common.cond_restricted) }}
 * @addtogroup app_{{data.device_name}}_{{cls.name}} {{cls.title}}
 * @{
 *
 * @brief {{cls.title}}
{%- if cls.description %}
 *
{{cls.description|commentify(start=" * ", width=common.wrap_width)}}
{%- endif %}
 */

{%- for enums in cls.enums %}

/**
{{- common.start_restricted_block(enums.restricted, "
 * " + common.cond_restricted + "
 *") }}
{{- common.if_restricted("
 * " + common.restricted_note) }}
{{enums.description|commentify(start=" * @brief ", width=common.wrap_width)}}
 */
typedef enum
{
{%- set ns = namespace(max_name_len = 0, max_value_len = 0) -%}
{%- for enum in enums.enum -%}
{%- set ns.max_name_len = [ ns.max_name_len, common.enum_name(data.device_name, cls, enum)|length]|max -%}
{%- set ns.max_value_len = [ ns.max_value_len, common.enum_value(enum)|length]|max -%}
{%- endfor -%}
{%- for enum in enums.enum -%}
{%- set decl_start = "  " + common.enum_name(data.device_name, cls, enum).ljust(ns.max_name_len) + " = " + (common.enum_value(enum) + (' ' if loop.last else ',')).ljust(ns.max_value_len + 1) + " /**< "-%}
{%- set description = "(" + common.enum_value(enum) + ") " + enum.description -%}
{%- set decl_comment = common.start_restricted_block(enum.restricted, "{br}" + common.cond_restricted + "{br}") + description + common.end_restricted_block("{br}" + common.endcond_restricted + "{br}") %}
{{decl_comment|commentify(start=decl_start, prepend="", indent=decl_start|length, width=common.wrap_width)}} */
{%- endfor %}
} app_{{data.device_name}}_{{cls.name}}_{{enums.name}}_t;
{{- common.end_restricted_block("
/** " + common.endcond_restricted + " */ // end restricted enum type") }}
{%- endfor -%}

{%- for defines in cls.defines -%}
{%- set ns = namespace(max_name_len = 0) -%}
{%- for define in defines.define -%}
{%- set ns.max_name_len = [ ns.max_name_len, common.define_name(data.device_name, cls, define)|length]|max -%}
{%- endfor %}

/**
{{- common.start_restricted_block(defines.restricted, "
 * " + common.cond_restricted) }}
 * @addtogroup app_{{data.device_name}}_{{cls.name}}_{{defines.name}} {{defines.title}}
 * @{
 *
{{- common.if_restricted("
 * " + common.restricted_note + "
 *") }}
{{defines.description|commentify(start=" * ", prepend=" * ", width=common.wrap_width)}}
 */
{%- for define in defines.define -%}
{%- set decl_comment = "/** " + common.start_restricted_block(define.restricted, "{br}" + common.cond_restricted + "{br}") + define.description + common.end_restricted_block("{br}" + common.endcond_restricted + "{br}") + " */" %}

{{decl_comment|commentify(prepend=" * ", width=common.wrap_width)}}
#define {{common.define_name(data.device_name, cls, define).ljust(ns.max_name_len)}} {{common.define_value(define)}}
{%- endfor %}

/** @} */ // end {{defines.title}}
{{- common.end_restricted_block("
/** " + common.endcond_restricted + " */ // end restricted defines") }}
{%- endfor %}

{%- for evt in cls.event %}

/**
{{- common.start_restricted_block(evt.restricted, "
 * " + common.cond_restricted + "
 *") }}
 * @addtogroup app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}} app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}}
 * @{
{{- common.if_restricted("
 * " + common.restricted_note + "
 *") }}
{#
 # Split the description so that the first line becomes the brief description and the rest
 # follows in a separate paragraph
-#}
{%- set description = evt.description|replace(".\n", ". ", count=1)|replace(". ", "{br}{br}", count=1) -%}
{{description|commentify(start=" * @brief ", width=common.wrap_width)}}
 */

{%- if evt.params.param|length > 0 %}

/***************************************************************************//**
{{- common.start_restricted_block(evt.restricted, "
 * " + common.cond_restricted) }}
{{- common.if_restricted("
 * " + common.restricted_note + "
 *") }}
 * @brief Data structure of the {{evt.name}} event
 ******************************************************************************/
PACKSTRUCT( struct app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}}_s
{
{%- set ns = namespace(max_type_len = 0, max_name_len = 0) -%}
{%- for p in evt.params.param -%}
{%- set ns.max_type_len = [ ns.max_type_len, p.type.c_datatype|length]|max -%}
{%- set ns.max_name_len = [ ns.max_name_len, p.name|length]|max -%}
{%- endfor -%}
{%- for p in evt.params.param -%}
{%- set name = p.name + ";" -%}
{%- set decl_start = "  " + p.type.c_datatype.ljust(ns.max_type_len) + " " + name.ljust(ns.max_name_len + 1) + " /**< " %}
{{common.param_description(p)|commentify(start=decl_start, prepend="", indent=decl_start|length, width=common.wrap_width)}} */
{%- endfor %}
});

typedef struct app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}}_s app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}}_t;

{{- common.end_restricted_block("
/** " + common.endcond_restricted + " */ // end restricted struct") }}
{%- endif %}

/** @} */ // end addtogroup app_{{data.device_name}}_evt_{{cls.name}}_{{evt.name}}
{{- common.end_restricted_block("
/** " + common.endcond_restricted + " */ // end restricted event") }}
{%- endfor %}

{{- common.end_restricted_block("
/** " + common.endcond_restricted + " */ // end restricted class") }}
{% endfor %}

/***************************************************************************//**
 * @addtogroup app_{{data.device_name}}_common_types {{data.device_name.upper()}} Common Types
 * @{
 *  @brief {{data.device_name.upper()}} common types
 */

/**
 * @brief Data structure of {{data.device_name.upper()}} API messages
 */
PACKSTRUCT( struct app_{{data.device_name}}_msg {
  /** API protocol header consisting of event identifier and data length */
  uint32_t   header;

  /** Union of API event types */
  union {
    uint8_t handle;
{%- for cls in classes %}
{%- for evt in cls.event %}
{%- if evt.params.param|length > 0 %}
    {{("app_"+data.device_name+"_evt_"+cls.name+"_"+evt.name+"_t").ljust(60)}} evt_{{cls.name}}_{{evt.name}}; /**< Data field for {{cls.name}} {{evt.name}} event*/
{%- endif %}
{%- endfor %}
{%- endfor %}
    uint8_t payload[APP_XAPI_MAX_PAYLOAD_SIZE];
  } data;
});

/**
 * @brief Type definition for the data structure of {{data.device_name.upper()}} API messages
 */
typedef struct app_{{data.device_name}}_msg app_{{data.device_name}}_msg_t;

/** @} */ // end addtogroup app_{{data.device_name}}_common_types
/******************************************************************************/

/***************************************************************************//**
 * @addtogroup app_wifi_utility_functions Utility Functions
 *  @brief Utility functions for applications on SoC
 *  @{
 */

/**
 * Get the next event that requires processing by user application. Application
 * is not blocked if no event is waiting.
 *
 * @param event the pointer for storing the new event
 * @return SL_STATUS_OK if a new event is returned, or SL_STATUS_NOT_FOUND if no
 *   event is waiting; other value indicates an error occurred
 */
sl_status_t app_{{data.device_name}}_pop_event(app_{{data.device_name}}_msg_t* event);

{% block device_specific_functions -%}
{% endblock %}

/** @} */ // end addtogroup app_wifi_utility_functions
/******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif
