{%- macro bool(value) -%}
  {{ 1 if value else 0 }}
{%- endmacro -%}

{%- macro cls_id(class) -%}
  APP_INTERNAL_{{data.device_name.upper()}}_{{class.name.upper()}}_CLASS_ID
{%- endmacro -%}

{%- macro msg_id(cls,msg) -%}
  APP_{{data.device_name.upper()}}_{{cls.name.upper()}}_{{msg.name.upper()}}_COMMAND_ID
{%- endmacro -%}

{%- macro cmd_handler(cls,cmd) -%}
  app_{{data.device_name}}_cmd_{{cls.name}}_{{cmd.name}}
{%- endmacro -%}

{%- if classes|length != 1 %}
    {% error "This template expects a single class" %}
{% else %}
{%- set cls = classes[0] %}
{%- endif %}
/********************************************************************************
 * @file app_wifi_{{cls.name}}_xapi_cmd_lut_handler.c 
 *******************************************************************************
 * # License
 * <b>Copyright 2025 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

#include <stdio.h>

#include "app_internal_{{data.device_name}}_api.h"
#include "app_xapi.h"
#include "xapi.h"

{% for cmd in cls.command -%}
void {{ cmd_handler(cls,cmd) }}(const void *);
{% endfor %}

const struct xapi_cmd app_internal_xapi_cmd_table_{{data.device_name}}_{{cls.name}}[] = {
{%- for cmd in cls.command %}
  {
    .handler = (app_xapi_handler){{ cmd_handler(cls,cmd) }},
    .class_id = {{ cls_id(cls) }},
    .command_id = {{ msg_id(cls,cmd) }},
    .metadata = {
      .sensitive = {{ bool(cmd.sensitive) }},
    }
  },
{%- endfor %}
  { 0 }
};
