 /********************************************************************************
 * @file  sl_{{data.device_name}}_class.h 
 * @brief Initialization APIs for {{data.device_name}} stack
 *******************************************************************************
 * # License
 * <b>Copyright 2025 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

{%- macro uc_init_note(type) %}
 * This function is automatically called by code generated by the Universal
 * Configurator if the {{type}} is included in the project. The application is
 * not expected to call this function directly.
{%- endmacro %}

{% set HEADER_GUARD_DEFINE = 'APP_' + data.device_name.upper() + '_STACK_INIT_H' %}
#ifndef {{ HEADER_GUARD_DEFINE }}
#define {{ HEADER_GUARD_DEFINE }}

#include "sl_status.h"
{%- block device_specific_includes %}
{%- endblock %}

/* Forward declarations of BGAPI class declaration structures */
struct sli_bgapi_class;
{% for cls in classes -%}
{%- if (cls.layer != "application") -%}
extern const struct sli_bgapi_class sli_bgapi_class_{{data.device_name}}_{{cls.name}}_optimized;
extern const struct sli_bgapi_class sli_bgapi_class_{{data.device_name}}_{{cls.name}}_full;
{% endif -%}
{%- endfor -%}
{%- block device_specific_forward_declarations %}
{%- endblock %}

/* Macro to get a pointer to a BGAPI class declaration */
{%- set SL_BGAPI_CLASS_MACRO_NAME = 'APP_' + data.device_name.upper() + '_BGAPI_CLASS' %}
#ifdef APP_WIFI_API_FULL
#define {{SL_BGAPI_CLASS_MACRO_NAME}}(class_name) &sli_bgapi_class_{{data.device_name}}_ ## class_name ## _full
#else
#define {{SL_BGAPI_CLASS_MACRO_NAME}}(class_name) &sli_bgapi_class_{{data.device_name}}_ ## class_name ## _optimized
#endif

{%- block device_specific_init_functions %}
{%- endblock %}

/**
 * Initialize the BGAPI classes for {{data.device_name}} stack.
 *
{{- uc_init_note("feature") }}
 *
 * @param[in] classes NULL-terminated array of pointers to class declarations.
 *   The array must remain valid until the next system reboot.
 *
 * @return SL_STATUS_OK if the initialization was successful; Other error code
 *   indicates a failure.
 */
sl_status_t app_{{data.device_name}}_init_classes(const struct sli_bgapi_class * const * classes);

#endif
