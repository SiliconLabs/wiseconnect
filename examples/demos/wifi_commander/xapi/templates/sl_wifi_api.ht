{% extends 'sl_wifi_device_api.ht' %}

{% block component_includes -%}

{% endblock -%}

{% block device_specific_macros %}

/* SL_BT_ synonyms for BGAPI header macros */
#define APP_WIFI_MSG_ID(HDR)        SL_BGAPI_MSG_ID(HDR)
#define APP_WIFI_MSG_HEADER_LEN     SL_BGAPI_MSG_HEADER_LEN
#define APP_WIFI_MSG_LEN(HDR)       SL_BGAPI_MSG_LEN(HDR)
#define APP_WIFI_BIT_ENCRYPTED      SL_BGAPI_BIT_ENCRYPTED
#define APP_WIFI_MSG_ENCRYPTED(HDR) SL_BGAPI_MSG_ENCRYPTED(HDR)

{%- endblock %}

{%- block device_specific_functions %}

/**
 * Run the Bluetooth stack to process scheduled tasks. Events for user
 * application may be generated as a result of this operation.
 */
sl_status_t app_wifi_init_device(void);

sl_status_t app_{{data.device_name}}_push_event(app_{{data.device_name}}_msg_t* event);
sl_status_t app_{{data.device_name}}_push_event_with_data(app_{{data.device_name}}_msg_t* event, size_t data_len, const void *data);

void app_wifi_on_event(app_{{data.device_name}}_msg_t* event);
/**
 * Handle an API command in binary format.
 *
 * This is provided to NCP target applications for processing commands received
 * from NCP transport. This function is a synonym for a generic BGAPI function
 * @ref sl_bgapi_handle_command. If the NCP application uses an RTOS, use the
 * sequence documented in @ref sl_bgapi_handle_command to handle the BGAPI
 * command in a thread-safe manner.
 *
 * @param hdr the command header
 * @param data the command payload in a byte array
 */
void app_wifi_handle_command(uint32_t hdr, void* data);

/**
 * Get the response to the command currently been handled.
 *
 * This is provided to NCP target applications for processing commands received
 * from NCP transport. This function is a synonym for a generic BGAPI function
 * @ref sl_bgapi_get_command_response.
 */
static inline app_{{data.device_name}}_msg_t* sl_wifi_get_command_response()
{
  return (app_{{data.device_name}}_msg_t*) sl_bgapi_get_command_response();
}

/**
 * Signals stack to send system_error event when in case of an error.
 */
void app_wifi_send_system_error(uint16_t reason, uint8_t data_len, const uint8_t *data);

{% endblock %}
