{# Common defaults used by several files for consistency #}
{% set common_ns = namespace(restricted_nest_depth=0, restricted_at_depth=0) %}
{%- set wrap_width = 80 -%}
{%- set restricted_note = "Restricted/experimental API. Contact Silicon Labs sales for more information." -%}
{%- set cond_restricted = "@cond RESTRICTED" -%}
{%- set endcond_restricted = "@endcond" -%}

{#
We use Doxygen conditional sections to exclude restricted APIs from the documentation. Unfortunately
Doxygen does not seem to handle nested conditionals correctly and ends up mismatching the group end
tags (at least up to version 1.8.20). To solve this, we use helper macros that track the nesting of
restricted blocks and emit the conditionals only on the outermost block. The following macros are
used by the templates:

- `start_restricted_block(condition, output)` is used to mark the start of a conditionally
  restricted block. If `condition` is true and this is the outermost restricted block, the macro
  emits `output`. Otherwise the macro emits nothing. Invocations of the macro must always be paired
  with a matching `end_restricted_block()` as the two count the nesting of the blocks.

- `end_restricted_block(output)` is used to mark the end of a conditionally restricted block. If the
  matching `start_restricted_block()` emitted the start marker, the macro emits `output`. Otherwise
  the macro emits nothing.

- `if_restricted(output)` is used to emit human-readable notes about restricted APIs. If the place
  of invocation is within a restricted block, the macro emits `output`. Otherwise the macro emits
  nothing.
#}

{%- macro start_restricted_block(condition, output) -%}
{%- set common_ns.restricted_nest_depth = common_ns.restricted_nest_depth + 1 -%}
{%- if condition and common_ns.restricted_at_depth <= 0 -%}
{%- set common_ns.restricted_at_depth = common_ns.restricted_nest_depth -%}
{{output}}
{%- endif -%}
{% endmacro -%}

{%- macro end_restricted_block(output) -%}
{%- if common_ns.restricted_nest_depth <= 0 -%}
    {% error "end_restricted_block() called without matching start_restricted_block()" %}
{% endif %}
{%- if common_ns.restricted_at_depth == common_ns.restricted_nest_depth -%}
{%- set common_ns.restricted_at_depth = 0 -%}
{{output}}
{%- endif -%}
{%- set common_ns.restricted_nest_depth = common_ns.restricted_nest_depth - 1 -%}
{%- endmacro -%}

{%- macro if_restricted(output) -%}
{%- if common_ns.restricted_at_depth > 0 -%}
{{output}}
{%- endif -%}
{%- endmacro -%}

{%- macro cmd_params(cls, command) -%}
{%- for p in command.params(unpack_array=True) -%}
{%- if p.type.datatype == "byte_array" -%}
  const {{p.type.c_datatype}} *{{p.name}}
{%- else -%}
  {{p.type.c_datatype}} {{p.name}}
{%- endif -%}
{%- if not (loop.last and command.returns(skip_status=True)|list|length == 0) %}, {% endif %}
{%- endfor -%}
{%- for p in command.returns(skip_status=True) %}
{%- if p.type.c_datatype == "uint8array" or p.type.c_datatype == "byte_array" -%}
  size_t max_{{p.name}}_size, size_t *{{p.name}}_len, uint8_t *{{p.name}}
{%- else -%}
  {{p.type.c_datatype}} *{{p.name}}
{%- endif -%}
{% if not loop.last %}, {% endif %}
{%- endfor -%}
{%- endmacro -%}

{%- macro declare_cmd(component, cls, command) -%}
{% if command.deprecated != None %}APP_XAPI_DEPRECATED {% endif -%}
{%- set ret_type = "void" if command.no_return else "sl_status_t" -%}
{%- set decl_start = ret_type + " app_" + component + "_" + cls.name + "_" + command.name + "(" -%}
{%- set decl_params = cmd_params(cls, command) + ")" -%}
{%- if (decl_start+decl_params)|length < wrap_width -%}
{{decl_start}}{{decl_params}}
{%- else -%}
{{decl_start}}{{decl_params|replace(", ", ",\n")|indent(width=decl_start|length)}}
{%- endif -%}
{%- endmacro -%}

{%- macro expectation_params(cls, command) -%}
{%- for p in command.params(unpack_array=True) -%}
{%- if p.type.datatype == "byte_array" -%}
  const {{p.type.c_datatype}} *expected_{{p.name}}
{%- else -%}
  {{p.type.c_datatype}} expected_{{p.name}}
{%- endif -%}
{%- if not (loop.last and command.returns(skip_status=False)|list|length == 0) %}, {% endif %}
{%- endfor -%}
{%- for p in command.returns(skip_status=False) %}
{%- if p.type.c_datatype == "uint8array" or p.type.c_datatype == "byte_array" -%}
  size_t out_{{p.name}}_len, uint8_t *out_{{p.name}}
{%- else -%}
  {{p.type.c_datatype}} out_{{p.name}}
{%- endif -%}
{% if not loop.last %}, {% endif %}
{%- endfor -%}
{%- endmacro -%}

{%- macro declare_expectation_func(component, cls, command) -%}
{%- set decl_start = "app_internal_bt_mock_expectation_t * expect_app_" + component + "_" + cls.name + "_" + command.name + "(" -%}
{%- set decl_params = expectation_params(cls, command) + ")" -%}
{%- if (decl_start+decl_params)|length < wrap_width -%}
{{decl_start}}{{decl_params}}
{%- else -%}
{{decl_start}}{{decl_params|replace(", ", ",\n")|indent(width=decl_start|length)}}
{%- endif -%}
{%- endmacro -%}

{%- macro gen_header_proto(component, device_id, cls, msg, type) -%}
{%- set header_msb = device_id * 8 + (128 if type == 'evt' else 0) -%}
#define APP_{{component.upper()}}_{{type.upper()}}_{{ (cls.name.upper() +"_" + msg.name.upper() + "_ID").ljust(50) }} 0x
{{- "%02x"|format(msg.index|int(base=16)) }}{{ "%02x"|format(cls.index|int(base=16)) }}00{{ "%02x"|format(header_msb) }}
{%- endmacro -%}

{%- macro values_description(p) -%}
{ul}
{# If values are explicitly listed, use those #}
{%- if p.values -%}
{%- for v in p.values %}
{%- if not v.restricted -%}
{li} {b}{%- if v.enum %}app_{{v.enum.full_name}} ({{enum_value(v.enum)}}){%- else -%}{{v.value_}}{%- endif -%}{% if v.description %}:{/b} {{v.description}}{% else %}{/b}{% endif %}{/li}
{%- endif -%}
{%- endfor -%}
{# If we didn't have explicit values but we have an enum definition, use its values #}
{%- elif p.enum_definition -%}
{%- for enum in p.enum_definition.enum -%}
{%- if not enum.restricted -%}
{li} {b}app_{{enum.full_name}} ({{enum_value(enum)}}):{/b} {{enum.description}}{/li}
{%- endif -%}
{%- endfor -%}
{%- endif -%}
{/ul}
{%- endmacro -%}

{%- macro range_description(p) -%}
{ul} 
{li}{b}Range:{/b} {%if p.min%}{{p.min}}{%endif%} to {%if p.max%}{{p.max}}{%endif%}{/li}
{/ul}
{%- endmacro -%}

{%- macro default_value_description(p) -%}
{%- if p.default -%}
{ul}
{li}{b}Default{/b}: {{p.default}}{/li}
{/ul}
{%- endif -%}
{%- endmacro -%}

{%- macro param_description(p) -%}
{% set description = p.description %}
{# If the parameter is an enum, prepend the enum reference to the description #}
{%- if p.enum_definition -%}Enum @ref app_{{p.enum_definition.full_name}}_t. {% endif -%}
{# If the description is asking for expansion of the value list, handle that #}
{%- if "{values}" in p.description -%}
{% set description = description|replace("{values}", values_description(p)) %}
{%- endif -%}
{# If the description is asking to add the parameter ranges, handle that #}
{%- if "{range}" in p.description -%}
{% set description = description|replace("{range}", range_description(p)) %}
{%- endif -%}
{%- if "{default}" in p.description -%}
{% set description = description|replace("{default}", default_value_description(p)) %}
{%- endif -%}
{{description}}
{%- endmacro -%}

{%- macro define_name(component, cls, define) -%}
APP_{{component.upper()}}_{{cls.name.upper()}}_{{define.name.upper()}}
{%- endmacro -%}

{%- macro define_value(define) -%}
{{"0x{0: <8x}".format(define.value_|int())}}
{%- endmacro -%}

{%- macro enum_name(component, cls, enum) -%}
APP_{{component.upper()}}_{{cls.name.upper()}}_{{enum.name.upper()}}
{%- endmacro -%}

{%- macro enum_value(enum) -%}
0x{{("{0:x}").format(enum.value_|int())}}
{%- endmacro -%}

{# Macro that expands to a Doxygen-style parameter definition #}
{%- macro doxygen_param(direction, name, description) -%}
{%- set prefix = " * " -%}
{%- set decl_start = "@param[" + direction + "] " + name -%}
{%- set full_decl = description|commentify(start=prefix + decl_start + " ", prepend=prefix, indent=2, width=wrap_width) %}
{%- if " *\n" in full_decl -%}
{# The declaration has more than one paragraph. Create a parameter block. #}
{%- set description = description|commentify(start=prefix + "  ", prepend=prefix, indent=2, width=wrap_width) %}
 * {{decl_start}} @parblock
{{description}}
 *   @endparblock
{%- else -%}
{# The declaration has just one paragraph. Use it as is. #}
{{full_decl}}
{%- endif %}
{%- endmacro -%}
