/********************************************************************************
 * @file  app_wifi_xapi_cmd_rx_handler.h
 *******************************************************************************
 * # License
 * <b>Copyright 2025 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

#ifndef COMMANDER_WIFI_XAPI_H
#define COMMANDER_WIFI_XAPI_H
#define VERSION no_link_tables

/*****************************************************************************
 *
 *  XAPI Internal implementation
 *
 *  Autogenerated file, do not edit
 *
 ****************************************************************************/

#include <stdarg.h>
#include "x_types.h"
#include "app_internal_wifi_api.h"

#ifdef __cplusplus
extern "C" {
#endif

#include <string.h>
#include "x_types.h"
#include "xapi.h"

/*
 * The inline functions below provide a mechanism for creating and filling XAPI responses and
 * events. The high-level approach and the interface available to callers is documented in
 * xapi.h. The implementation of the functions follows the design principles of providing a similar
 * API for both responses and events, minimizing the code size, and avoiding any unnecessary copying
 * of data.
 *
 * A function with naming "commander_set_<rsp/evt>_<class>_<command>_msg()" is created for both
 * responses and events. The function takes the output location and all non-array parameters for the
 * message in question. The function sets the class and message ID in the XAPI header, and sets the
 * non-array parameters in the event-specific fields.
 *
 * The functions for creating responses are named "commander_rsp_<class>_<command>()". Depending on
 * whether the request has variable-length data or not, these functions call either
 * "commander_create_xapi_response()" or "commander_create_xapi_response_data()" implemented in
 * xapi.c. The function in xapi.c initializes the type and size of the message, copies the data if
 * needed, and returns a pointer to the response message structure. The response creation function
 * "commander_rsp_<class>_<command>()" then uses the corresponding
 * "commander_set_rsp_<class>_<command>_msg()" function to set the individual non-array parameters.
 *
 * Additionally a function named "commander_get_rsp_<class>_<command>_data_buf()" is generated for
 * responses that have variable-length data. Callers may use that to obtain a pointer to the data
 * array and fill that directly prior to calling "commander_rsp_<class>_<command>()" (see xapi.h for
 * description).
 *
 * The functions for creating and queuing events support different ways of passing the data, and
 * those are documented in xapi.h. The functions call a corresponding function in xapi.c that
 * obtains the required xbufs for the event, initializes the type and size of the message, copies
 * the data if needed, queues the message in the event queue, and returns a pointer to the event
 * message header (which is guaranteed to be in contiguous memory). The following functions are
 * involved:
 *
 * - app_internal_xapi_create_event_<device>_<class>_<event>(<non-array parameters>)" calls
 *   app_internal_xapi_create_event()
 *
 * - commander_evt_<class>_<command>(<non-array parameters>) calls commander_queue_xapi_event()
 *
 * - commander_evt_<class>_<command>(<non-array parameters>, <data_len>, <void* data>) calls
 *   commander_queue_xapi_event_data()
 *
 * - commander_evt_<class>_<command>_xbuf_copy(<non-array parameters>, <xbuf* data>) calls
 *   commander_queue_xapi_event_xbuf_copy()
 *
 * - commander_evt_<class>_<command>_xbuf_reuse(<non-array parameters>, <xbuf** data>) calls
 *   commander_queue_xapi_event_xbuf_reuse()
 *
 * The event creation function "commander_event_<class>_<command>()" then uses the corresponding
 * "commander_set_evt_<class>_<command>_msg()" function to set the individual non-array parameters
 * directly to the message header allocated by the function in xapi.c.
 */
/* Functions for message commander_rsp_system_hello */
static inline void app_wifi_set_rsp_system_hello_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_system_hello.result = result;
}

static inline void app_wifi_rsp_system_hello(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x00,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_system_hello_t)));
  app_wifi_set_rsp_system_hello_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_system_echo */
static inline void app_wifi_set_rsp_system_echo_msg(struct app_wifi_packet *xapi_msg,
                                                    uint16_t result,
                                                    uint32_t number_out)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_system_echo.result     = result;
  xapi_msg->data.rsp_system_echo.number_out = number_out;
}

static inline void app_wifi_rsp_system_echo(uint16_t result, uint32_t number_out)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x00,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_system_echo_t)));
  app_wifi_set_rsp_system_echo_msg((struct app_wifi_packet *)xapi_msg, result, number_out);
}

/* Functions for message commander_rsp_system_reset */
static inline void app_wifi_set_rsp_system_reset_msg(struct app_wifi_packet *xapi_msg)
{
  (void)xapi_msg;
}

static inline void app_wifi_rsp_system_reset()
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x00, 0x02, (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi, 0));
  app_wifi_set_rsp_system_reset_msg((struct app_wifi_packet *)xapi_msg);
}

/* Functions for message commander_evt_system_boot */
static inline void app_wifi_set_evt_system_boot_msg(struct app_wifi_packet *xapi_msg,
                                                    uint8_t app_major,
                                                    uint8_t app_minor,
                                                    uint8_t app_patch,
                                                    uint8_t fw_chip_id,
                                                    uint8_t fw_rom_id,
                                                    uint8_t fw_major,
                                                    uint8_t fw_minor,
                                                    uint8_t fw_security_version,
                                                    uint8_t fw_patch_num,
                                                    uint8_t fw_customer_id,
                                                    uint16_t fw_build_num)
{
  (void)xapi_msg;
  xapi_msg->data.evt_system_boot.app_major           = app_major;
  xapi_msg->data.evt_system_boot.app_minor           = app_minor;
  xapi_msg->data.evt_system_boot.app_patch           = app_patch;
  xapi_msg->data.evt_system_boot.fw_chip_id          = fw_chip_id;
  xapi_msg->data.evt_system_boot.fw_rom_id           = fw_rom_id;
  xapi_msg->data.evt_system_boot.fw_major            = fw_major;
  xapi_msg->data.evt_system_boot.fw_minor            = fw_minor;
  xapi_msg->data.evt_system_boot.fw_security_version = fw_security_version;
  xapi_msg->data.evt_system_boot.fw_patch_num        = fw_patch_num;
  xapi_msg->data.evt_system_boot.fw_customer_id      = fw_customer_id;
  xapi_msg->data.evt_system_boot.fw_build_num        = fw_build_num;
}

static const struct xapi_event xapi_event_decl_wifi_system_boot = { API_INTERNAL_XAPI_MSG_HEADER(
  0x00,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_system_boot_t)) };

static inline bool app_wifi_evt_system_boot(uint8_t app_major,
                                            uint8_t app_minor,
                                            uint8_t app_patch,
                                            uint8_t fw_chip_id,
                                            uint8_t fw_rom_id,
                                            uint8_t fw_major,
                                            uint8_t fw_minor,
                                            uint8_t fw_security_version,
                                            uint8_t fw_patch_num,
                                            uint8_t fw_customer_id,
                                            uint16_t fw_build_num)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_system_boot.event_header;
  app_wifi_set_evt_system_boot_msg((struct app_wifi_packet *)&xapi_msg,
                                   app_major,
                                   app_minor,
                                   app_patch,
                                   fw_chip_id,
                                   fw_rom_id,
                                   fw_major,
                                   fw_minor,
                                   fw_security_version,
                                   fw_patch_num,
                                   fw_customer_id,
                                   fw_build_num);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_system_error */
static inline void app_wifi_set_evt_system_error_msg(struct app_wifi_packet *xapi_msg, uint16_t reason)
{
  (void)xapi_msg;
  xapi_msg->data.evt_system_error.reason = reason;
}

static const struct xapi_event xapi_event_decl_wifi_system_error = { API_INTERNAL_XAPI_MSG_HEADER(
  0x00,
  0x01,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_system_error_t)) };

static inline bool app_wifi_evt_system_error(uint16_t reason, size_t data_len, const void *data_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_system_error.event_header;
  app_wifi_set_evt_system_error_msg((struct app_wifi_packet *)&xapi_msg, reason);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, data_len, data_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_net_intf_init */
static inline void app_wifi_set_rsp_net_intf_init_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_init.result = result;
}

static inline void app_wifi_rsp_net_intf_init(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_init_t)));
  app_wifi_set_rsp_net_intf_init_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_deinit */
static inline void app_wifi_set_rsp_net_intf_deinit_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_deinit.result = result;
}

static inline void app_wifi_rsp_net_intf_deinit(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_deinit_t)));
  app_wifi_set_rsp_net_intf_deinit_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_up */
static inline void app_wifi_set_rsp_net_intf_up_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_up.result = result;
}

static inline void app_wifi_rsp_net_intf_up(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_up_t)));
  app_wifi_set_rsp_net_intf_up_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_down */
static inline void app_wifi_set_rsp_net_intf_down_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_down.result = result;
}

static inline void app_wifi_rsp_net_intf_down(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x03,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_down_t)));
  app_wifi_set_rsp_net_intf_down_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_set_device_config */
static inline void app_wifi_set_rsp_net_intf_set_device_config_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_set_device_config.result = result;
}

static inline void app_wifi_rsp_net_intf_set_device_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x04,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_set_device_config_t)));
  app_wifi_set_rsp_net_intf_set_device_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_get_init_status */
static inline void app_wifi_set_rsp_net_intf_get_init_status_msg(struct app_wifi_packet *xapi_msg,
                                                                 uint16_t result,
                                                                 uint8_t is_init)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_get_init_status.result  = result;
  xapi_msg->data.rsp_net_intf_get_init_status.is_init = is_init;
}

static inline void app_wifi_rsp_net_intf_get_init_status(uint16_t result, uint8_t is_init)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x06,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_get_init_status_t)));
  app_wifi_set_rsp_net_intf_get_init_status_msg((struct app_wifi_packet *)xapi_msg, result, is_init);
}

/* Functions for message commander_rsp_net_intf_get_network_status */
static inline void app_wifi_set_rsp_net_intf_get_network_status_msg(struct app_wifi_packet *xapi_msg,
                                                                    uint16_t result,
                                                                    uint8_t is_up)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_get_network_status.result = result;
  xapi_msg->data.rsp_net_intf_get_network_status.is_up  = is_up;
}

static inline void app_wifi_rsp_net_intf_get_network_status(uint16_t result, uint8_t is_up)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x07,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_get_network_status_t)));
  app_wifi_set_rsp_net_intf_get_network_status_msg((struct app_wifi_packet *)xapi_msg, result, is_up);
}

/* Functions for message commander_rsp_net_intf_get_device_config */
static inline void app_wifi_set_rsp_net_intf_get_device_config_msg(struct app_wifi_packet *xapi_msg,
                                                                   uint16_t result,
                                                                   uint8_t boot_option,
                                                                   const void *mac_address,
                                                                   uint8_t band,
                                                                   uint8_t region_code,
                                                                   uint8_t tx_ratio_in_buffer_pool,
                                                                   uint8_t rx_ratio_in_buffer_pool,
                                                                   uint8_t global_ratio_in_buffer_pool,
                                                                   uint8_t efuse_data_type)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_get_device_config.result      = result;
  xapi_msg->data.rsp_net_intf_get_device_config.boot_option = boot_option;
  memcpy(&xapi_msg->data.rsp_net_intf_get_device_config.mac_address, mac_address, sizeof(mac_addr));
  xapi_msg->data.rsp_net_intf_get_device_config.band                        = band;
  xapi_msg->data.rsp_net_intf_get_device_config.region_code                 = region_code;
  xapi_msg->data.rsp_net_intf_get_device_config.tx_ratio_in_buffer_pool     = tx_ratio_in_buffer_pool;
  xapi_msg->data.rsp_net_intf_get_device_config.rx_ratio_in_buffer_pool     = rx_ratio_in_buffer_pool;
  xapi_msg->data.rsp_net_intf_get_device_config.global_ratio_in_buffer_pool = global_ratio_in_buffer_pool;
  xapi_msg->data.rsp_net_intf_get_device_config.efuse_data_type             = efuse_data_type;
}

static inline void app_wifi_rsp_net_intf_get_device_config(uint16_t result,
                                                           uint8_t boot_option,
                                                           const void *mac_address,
                                                           uint8_t band,
                                                           uint8_t region_code,
                                                           uint8_t tx_ratio_in_buffer_pool,
                                                           uint8_t rx_ratio_in_buffer_pool,
                                                           uint8_t global_ratio_in_buffer_pool,
                                                           uint8_t efuse_data_type)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x08,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_get_device_config_t)));
  app_wifi_set_rsp_net_intf_get_device_config_msg((struct app_wifi_packet *)xapi_msg,
                                                  result,
                                                  boot_option,
                                                  mac_address,
                                                  band,
                                                  region_code,
                                                  tx_ratio_in_buffer_pool,
                                                  rx_ratio_in_buffer_pool,
                                                  global_ratio_in_buffer_pool,
                                                  efuse_data_type);
}

/* Functions for message commander_rsp_net_intf_set_si91x_boot_config */
static inline void app_wifi_set_rsp_net_intf_set_si91x_boot_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_set_si91x_boot_config.result = result;
}

static inline void app_wifi_rsp_net_intf_set_si91x_boot_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x05,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_set_si91x_boot_config_t)));
  app_wifi_set_rsp_net_intf_set_si91x_boot_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_intf_get_si91x_boot_config */
static inline void app_wifi_set_rsp_net_intf_get_si91x_boot_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result,
                                                                       uint16_t oper_mode,
                                                                       uint16_t coex_mode,
                                                                       uint32_t feature_bit_map,
                                                                       uint32_t tcp_ip_feature_bit_map,
                                                                       uint32_t custom_feature_bit_map,
                                                                       uint32_t ext_custom_feature_bit_map,
                                                                       uint32_t bt_feature_bit_map,
                                                                       uint32_t ext_tcp_ip_feature_bit_map,
                                                                       uint32_t ble_feature_bit_map,
                                                                       uint32_t ble_ext_feature_bit_map,
                                                                       uint32_t config_feature_bit_map)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.result                     = result;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.oper_mode                  = oper_mode;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.coex_mode                  = coex_mode;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.feature_bit_map            = feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.tcp_ip_feature_bit_map     = tcp_ip_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.custom_feature_bit_map     = custom_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.ext_custom_feature_bit_map = ext_custom_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.bt_feature_bit_map         = bt_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.ext_tcp_ip_feature_bit_map = ext_tcp_ip_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.ble_feature_bit_map        = ble_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.ble_ext_feature_bit_map    = ble_ext_feature_bit_map;
  xapi_msg->data.rsp_net_intf_get_si91x_boot_config.config_feature_bit_map     = config_feature_bit_map;
}

static inline void app_wifi_rsp_net_intf_get_si91x_boot_config(uint16_t result,
                                                               uint16_t oper_mode,
                                                               uint16_t coex_mode,
                                                               uint32_t feature_bit_map,
                                                               uint32_t tcp_ip_feature_bit_map,
                                                               uint32_t custom_feature_bit_map,
                                                               uint32_t ext_custom_feature_bit_map,
                                                               uint32_t bt_feature_bit_map,
                                                               uint32_t ext_tcp_ip_feature_bit_map,
                                                               uint32_t ble_feature_bit_map,
                                                               uint32_t ble_ext_feature_bit_map,
                                                               uint32_t config_feature_bit_map)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x09,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_get_si91x_boot_config_t)));
  app_wifi_set_rsp_net_intf_get_si91x_boot_config_msg((struct app_wifi_packet *)xapi_msg,
                                                      result,
                                                      oper_mode,
                                                      coex_mode,
                                                      feature_bit_map,
                                                      tcp_ip_feature_bit_map,
                                                      custom_feature_bit_map,
                                                      ext_custom_feature_bit_map,
                                                      bt_feature_bit_map,
                                                      ext_tcp_ip_feature_bit_map,
                                                      ble_feature_bit_map,
                                                      ble_ext_feature_bit_map,
                                                      config_feature_bit_map);
}

/* Functions for message commander_rsp_net_intf_load_default_device_config */
static inline void app_wifi_set_rsp_net_intf_load_default_device_config_msg(struct app_wifi_packet *xapi_msg,
                                                                            uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_intf_load_default_device_config.result = result;
}

static inline void app_wifi_rsp_net_intf_load_default_device_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x11,
                                 0x0A,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_intf_load_default_device_config_t)));
  app_wifi_set_rsp_net_intf_load_default_device_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_evt_net_intf_network_up_completed */
static inline void app_wifi_set_evt_net_intf_network_up_completed_msg(struct app_wifi_packet *xapi_msg,
                                                                      uint8_t net_interface,
                                                                      uint16_t is_completed)
{
  (void)xapi_msg;
  xapi_msg->data.evt_net_intf_network_up_completed.net_interface = net_interface;
  xapi_msg->data.evt_net_intf_network_up_completed.is_completed  = is_completed;
}

static const struct xapi_event xapi_event_decl_wifi_net_intf_network_up_completed = { API_INTERNAL_XAPI_MSG_HEADER(
  0x11,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_net_intf_network_up_completed_t)) };

static inline bool app_wifi_evt_net_intf_network_up_completed(uint8_t net_interface, uint16_t is_completed)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_net_intf_network_up_completed.event_header;
  app_wifi_set_evt_net_intf_network_up_completed_msg((struct app_wifi_packet *)&xapi_msg, net_interface, is_completed);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_net_profile_set */
static inline void app_wifi_set_rsp_net_profile_set_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set.result = result;
}

static inline void app_wifi_rsp_net_profile_set(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_t)));
  app_wifi_set_rsp_net_profile_set_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_delete */
static inline void app_wifi_set_rsp_net_profile_delete_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_delete.result = result;
}

static inline void app_wifi_rsp_net_profile_delete(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_delete_t)));
  app_wifi_set_rsp_net_profile_delete_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_ssid */
static inline void app_wifi_set_rsp_net_profile_set_ap_ssid_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_ssid.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_ssid(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x03,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_ssid_t)));
  app_wifi_set_rsp_net_profile_set_ap_ssid_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_config */
static inline void app_wifi_set_rsp_net_profile_set_ap_config_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_config.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x04,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_config_t)));
  app_wifi_set_rsp_net_profile_set_ap_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_channel */
static inline void app_wifi_set_rsp_net_profile_set_ap_channel_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_channel.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_channel(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x05,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_channel_t)));
  app_wifi_set_rsp_net_profile_set_ap_channel_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_ip_config */
static inline void app_wifi_set_rsp_net_profile_set_ap_ip_config_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_ip_config.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_ip_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x06,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_ip_config_t)));
  app_wifi_set_rsp_net_profile_set_ap_ip_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_ipv4_config */
static inline void app_wifi_set_rsp_net_profile_set_ap_ipv4_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_ipv4_config.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_ipv4_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x07,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_ipv4_config_t)));
  app_wifi_set_rsp_net_profile_set_ap_ipv4_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_ap_ipv6_config */
static inline void app_wifi_set_rsp_net_profile_set_ap_ipv6_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_ap_ipv6_config.result = result;
}

static inline void app_wifi_rsp_net_profile_set_ap_ipv6_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x08,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_ap_ipv6_config_t)));
  app_wifi_set_rsp_net_profile_set_ap_ipv6_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_get_ap_ssid */
static inline void app_wifi_set_rsp_net_profile_get_ap_ssid_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_ssid.result = result;
}

static inline uint8_t *app_wifi_get_rsp_net_profile_get_ap_ssid_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)->data.rsp_net_profile_get_ap_ssid.ssid.data;
}

static inline void app_wifi_rsp_net_profile_get_ap_ssid(uint16_t result, size_t ssid_len, const void *ssid_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_ssid_t)),
    ssid_len,
    ssid_buf);
  app_wifi_set_rsp_net_profile_get_ap_ssid_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_get_ap_config */
static inline void app_wifi_set_rsp_net_profile_get_ap_config_msg(struct app_wifi_packet *xapi_msg,
                                                                  uint16_t result,
                                                                  uint16_t ap_security,
                                                                  uint8_t ap_encryption,
                                                                  uint8_t ap_rate_protocol,
                                                                  uint8_t ap_options,
                                                                  uint32_t ap_credential_id,
                                                                  uint8_t ap_keepalive_type,
                                                                  uint16_t ap_beacon_interval,
                                                                  uint32_t ap_client_idle_timeout,
                                                                  uint16_t ap_dtim_beacon_count,
                                                                  uint8_t ap_maximum_clients,
                                                                  uint8_t ap_beacon_stop,
                                                                  uint8_t ap_tdi,
                                                                  uint8_t ap_is_11n_enabled)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_config.result                 = result;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_security            = ap_security;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_encryption          = ap_encryption;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_rate_protocol       = ap_rate_protocol;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_options             = ap_options;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_credential_id       = ap_credential_id;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_keepalive_type      = ap_keepalive_type;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_beacon_interval     = ap_beacon_interval;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_client_idle_timeout = ap_client_idle_timeout;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_dtim_beacon_count   = ap_dtim_beacon_count;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_maximum_clients     = ap_maximum_clients;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_beacon_stop         = ap_beacon_stop;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_tdi                 = ap_tdi;
  xapi_msg->data.rsp_net_profile_get_ap_config.ap_is_11n_enabled      = ap_is_11n_enabled;
}

static inline void app_wifi_rsp_net_profile_get_ap_config(uint16_t result,
                                                          uint16_t ap_security,
                                                          uint8_t ap_encryption,
                                                          uint8_t ap_rate_protocol,
                                                          uint8_t ap_options,
                                                          uint32_t ap_credential_id,
                                                          uint8_t ap_keepalive_type,
                                                          uint16_t ap_beacon_interval,
                                                          uint32_t ap_client_idle_timeout,
                                                          uint16_t ap_dtim_beacon_count,
                                                          uint8_t ap_maximum_clients,
                                                          uint8_t ap_beacon_stop,
                                                          uint8_t ap_tdi,
                                                          uint8_t ap_is_11n_enabled)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x09,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_config_t)));
  app_wifi_set_rsp_net_profile_get_ap_config_msg((struct app_wifi_packet *)xapi_msg,
                                                 result,
                                                 ap_security,
                                                 ap_encryption,
                                                 ap_rate_protocol,
                                                 ap_options,
                                                 ap_credential_id,
                                                 ap_keepalive_type,
                                                 ap_beacon_interval,
                                                 ap_client_idle_timeout,
                                                 ap_dtim_beacon_count,
                                                 ap_maximum_clients,
                                                 ap_beacon_stop,
                                                 ap_tdi,
                                                 ap_is_11n_enabled);
}

/* Functions for message commander_rsp_net_profile_get_ap_channel */
static inline void app_wifi_set_rsp_net_profile_get_ap_channel_msg(struct app_wifi_packet *xapi_msg,
                                                                   uint16_t result,
                                                                   uint16_t channel,
                                                                   uint8_t band,
                                                                   uint8_t bandwidth)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_channel.result    = result;
  xapi_msg->data.rsp_net_profile_get_ap_channel.channel   = channel;
  xapi_msg->data.rsp_net_profile_get_ap_channel.band      = band;
  xapi_msg->data.rsp_net_profile_get_ap_channel.bandwidth = bandwidth;
}

static inline void app_wifi_rsp_net_profile_get_ap_channel(uint16_t result,
                                                           uint16_t channel,
                                                           uint8_t band,
                                                           uint8_t bandwidth)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x0A,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_channel_t)));
  app_wifi_set_rsp_net_profile_get_ap_channel_msg((struct app_wifi_packet *)xapi_msg, result, channel, band, bandwidth);
}

/* Functions for message commander_rsp_net_profile_get_ap_ip_config */
static inline void app_wifi_set_rsp_net_profile_get_ap_ip_config_msg(struct app_wifi_packet *xapi_msg,
                                                                     uint16_t result,
                                                                     uint8_t mode,
                                                                     uint8_t type)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_ip_config.result = result;
  xapi_msg->data.rsp_net_profile_get_ap_ip_config.mode   = mode;
  xapi_msg->data.rsp_net_profile_get_ap_ip_config.type   = type;
}

static inline void app_wifi_rsp_net_profile_get_ap_ip_config(uint16_t result, uint8_t mode, uint8_t type)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x0B,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_ip_config_t)));
  app_wifi_set_rsp_net_profile_get_ap_ip_config_msg((struct app_wifi_packet *)xapi_msg, result, mode, type);
}

/* Functions for message commander_rsp_net_profile_get_ap_ipv4_config */
static inline void app_wifi_set_rsp_net_profile_get_ap_ipv4_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result,
                                                                       const void *ipv4_address,
                                                                       const void *gateway,
                                                                       const void *netmask)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_ipv4_config.result = result;
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv4_config.ipv4_address, ipv4_address, sizeof(ipv4_addr));
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv4_config.gateway, gateway, sizeof(ipv4_addr));
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv4_config.netmask, netmask, sizeof(ipv4_addr));
}

static inline void app_wifi_rsp_net_profile_get_ap_ipv4_config(uint16_t result,
                                                               const void *ipv4_address,
                                                               const void *gateway,
                                                               const void *netmask)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x0C,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_ipv4_config_t)));
  app_wifi_set_rsp_net_profile_get_ap_ipv4_config_msg((struct app_wifi_packet *)xapi_msg,
                                                      result,
                                                      ipv4_address,
                                                      gateway,
                                                      netmask);
}

/* Functions for message commander_rsp_net_profile_get_ap_ipv6_config */
static inline void app_wifi_set_rsp_net_profile_get_ap_ipv6_config_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result,
                                                                       const void *link_local_address,
                                                                       const void *global_address,
                                                                       const void *gateway_address)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_ap_ipv6_config.result = result;
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv6_config.link_local_address, link_local_address, sizeof(ipv6_addr));
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv6_config.global_address, global_address, sizeof(ipv6_addr));
  memcpy(&xapi_msg->data.rsp_net_profile_get_ap_ipv6_config.gateway_address, gateway_address, sizeof(ipv6_addr));
}

static inline void app_wifi_rsp_net_profile_get_ap_ipv6_config(uint16_t result,
                                                               const void *link_local_address,
                                                               const void *global_address,
                                                               const void *gateway_address)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x0D,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_ap_ipv6_config_t)));
  app_wifi_set_rsp_net_profile_get_ap_ipv6_config_msg((struct app_wifi_packet *)xapi_msg,
                                                      result,
                                                      link_local_address,
                                                      global_address,
                                                      gateway_address);
}

/* Functions for message commander_rsp_net_profile_set_client_ssid */
static inline void app_wifi_set_rsp_net_profile_set_client_ssid_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_client_ssid.result = result;
}

static inline void app_wifi_rsp_net_profile_set_client_ssid(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x15,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_client_ssid_t)));
  app_wifi_set_rsp_net_profile_set_client_ssid_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_client_config */
static inline void app_wifi_set_rsp_net_profile_set_client_config_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_client_config.result = result;
}

static inline void app_wifi_rsp_net_profile_set_client_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x16,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_client_config_t)));
  app_wifi_set_rsp_net_profile_set_client_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_set_client_channel */
static inline void app_wifi_set_rsp_net_profile_set_client_channel_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_set_client_channel.result = result;
}

static inline void app_wifi_rsp_net_profile_set_client_channel(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x10,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_set_client_channel_t)));
  app_wifi_set_rsp_net_profile_set_client_channel_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_get_client_ssid */
static inline void app_wifi_set_rsp_net_profile_get_client_ssid_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_client_ssid.result = result;
}

static inline uint8_t *app_wifi_get_rsp_net_profile_get_client_ssid_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)->data.rsp_net_profile_get_client_ssid.ssid.data;
}

static inline void app_wifi_rsp_net_profile_get_client_ssid(uint16_t result, size_t ssid_len, const void *ssid_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x11,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_client_ssid_t)),
    ssid_len,
    ssid_buf);
  app_wifi_set_rsp_net_profile_get_client_ssid_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_profile_get_client_config */
static inline void app_wifi_set_rsp_net_profile_get_client_config_msg(struct app_wifi_packet *xapi_msg,
                                                                      uint16_t result,
                                                                      const void *bssid,
                                                                      uint16_t bss_type,
                                                                      uint16_t client_security,
                                                                      uint8_t client_encryption,
                                                                      uint32_t client_options,
                                                                      uint32_t credential_id,
                                                                      uint16_t channel_bitmap_2_4g)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_client_config.result = result;
  memcpy(&xapi_msg->data.rsp_net_profile_get_client_config.bssid, bssid, sizeof(app_wifi_bssid_t));
  xapi_msg->data.rsp_net_profile_get_client_config.bss_type            = bss_type;
  xapi_msg->data.rsp_net_profile_get_client_config.client_security     = client_security;
  xapi_msg->data.rsp_net_profile_get_client_config.client_encryption   = client_encryption;
  xapi_msg->data.rsp_net_profile_get_client_config.client_options      = client_options;
  xapi_msg->data.rsp_net_profile_get_client_config.credential_id       = credential_id;
  xapi_msg->data.rsp_net_profile_get_client_config.channel_bitmap_2_4g = channel_bitmap_2_4g;
}

static inline void app_wifi_rsp_net_profile_get_client_config(uint16_t result,
                                                              const void *bssid,
                                                              uint16_t bss_type,
                                                              uint16_t client_security,
                                                              uint8_t client_encryption,
                                                              uint32_t client_options,
                                                              uint32_t credential_id,
                                                              uint16_t channel_bitmap_2_4g)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x12,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_client_config_t)));
  app_wifi_set_rsp_net_profile_get_client_config_msg((struct app_wifi_packet *)xapi_msg,
                                                     result,
                                                     bssid,
                                                     bss_type,
                                                     client_security,
                                                     client_encryption,
                                                     client_options,
                                                     credential_id,
                                                     channel_bitmap_2_4g);
}

/* Functions for message commander_rsp_net_profile_get_client_channel */
static inline void app_wifi_set_rsp_net_profile_get_client_channel_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint16_t result,
                                                                       uint16_t channel,
                                                                       uint8_t band,
                                                                       uint8_t bandwidth)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_profile_get_client_channel.result    = result;
  xapi_msg->data.rsp_net_profile_get_client_channel.channel   = channel;
  xapi_msg->data.rsp_net_profile_get_client_channel.band      = band;
  xapi_msg->data.rsp_net_profile_get_client_channel.bandwidth = bandwidth;
}

static inline void app_wifi_rsp_net_profile_get_client_channel(uint16_t result,
                                                               uint16_t channel,
                                                               uint8_t band,
                                                               uint8_t bandwidth)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x12,
                                 0x13,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_profile_get_client_channel_t)));
  app_wifi_set_rsp_net_profile_get_client_channel_msg((struct app_wifi_packet *)xapi_msg,
                                                      result,
                                                      channel,
                                                      band,
                                                      bandwidth);
}

/* Functions for message commander_rsp_ap_disconnect_client */
static inline void app_wifi_set_rsp_ap_disconnect_client_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_ap_disconnect_client.result = result;
}

static inline void app_wifi_rsp_ap_disconnect_client(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x05,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_ap_disconnect_client_t)));
  app_wifi_set_rsp_ap_disconnect_client_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_ap_get_client_info */
static inline void app_wifi_set_rsp_ap_get_client_info_msg(struct app_wifi_packet *xapi_msg,
                                                           uint16_t result,
                                                           uint8_t client_count)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_ap_get_client_info.result       = result;
  xapi_msg->data.rsp_ap_get_client_info.client_count = client_count;
}

static inline void app_wifi_rsp_ap_get_client_info(uint16_t result, uint8_t client_count)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x05,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_ap_get_client_info_t)));
  app_wifi_set_rsp_ap_get_client_info_msg((struct app_wifi_packet *)xapi_msg, result, client_count);
}

/* Functions for message commander_evt_ap_client_connected_event */
static inline void app_wifi_set_evt_ap_client_connected_event_msg(struct app_wifi_packet *xapi_msg,
                                                                  const void *mac_address)
{
  (void)xapi_msg;
  memcpy(&xapi_msg->data.evt_ap_client_connected_event.mac_address, mac_address, sizeof(mac_addr));
}

static const struct xapi_event xapi_event_decl_wifi_ap_client_connected_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x05,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_ap_client_connected_event_t)) };

static inline bool app_wifi_evt_ap_client_connected_event(const void *mac_address)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_ap_client_connected_event.event_header;
  app_wifi_set_evt_ap_client_connected_event_msg((struct app_wifi_packet *)&xapi_msg, mac_address);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_ap_client_disconnected_event */
static inline void app_wifi_set_evt_ap_client_disconnected_event_msg(struct app_wifi_packet *xapi_msg,
                                                                     const void *mac_address)
{
  (void)xapi_msg;
  memcpy(&xapi_msg->data.evt_ap_client_disconnected_event.mac_address, mac_address, sizeof(mac_addr));
}

static const struct xapi_event xapi_event_decl_wifi_ap_client_disconnected_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x05,
  0x01,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_ap_client_disconnected_event_t)) };

static inline bool app_wifi_evt_ap_client_disconnected_event(const void *mac_address)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_ap_client_disconnected_event.event_header;
  app_wifi_set_evt_ap_client_disconnected_event_msg((struct app_wifi_packet *)&xapi_msg, mac_address);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_ap_get_client_info_event */
static inline void app_wifi_set_evt_ap_get_client_info_event_msg(struct app_wifi_packet *xapi_msg,
                                                                 const void *ipv4_address,
                                                                 const void *mac_address)
{
  (void)xapi_msg;
  memcpy(&xapi_msg->data.evt_ap_get_client_info_event.ipv4_address, ipv4_address, sizeof(ipv4_addr));
  memcpy(&xapi_msg->data.evt_ap_get_client_info_event.mac_address, mac_address, sizeof(mac_addr));
}

static const struct xapi_event xapi_event_decl_wifi_ap_get_client_info_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x05,
  0x02,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_ap_get_client_info_event_t)) };

static inline bool app_wifi_evt_ap_get_client_info_event(const void *ipv4_address, const void *mac_address)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_ap_get_client_info_event.event_header;
  app_wifi_set_evt_ap_get_client_info_event_msg((struct app_wifi_packet *)&xapi_msg, ipv4_address, mac_address);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_net_cred_set */
static inline void app_wifi_set_rsp_net_cred_set_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_cred_set.result = result;
}

static inline void app_wifi_rsp_net_cred_set(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x13,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_cred_set_t)));
  app_wifi_set_rsp_net_cred_set_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_net_cred_get */
static inline void app_wifi_set_rsp_net_cred_get_msg(struct app_wifi_packet *xapi_msg,
                                                     uint16_t result,
                                                     uint32_t credential_length)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_cred_get.result            = result;
  xapi_msg->data.rsp_net_cred_get.credential_length = credential_length;
}

static inline uint8_t *app_wifi_get_rsp_net_cred_get_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)->data.rsp_net_cred_get.credential.data;
}

static inline void app_wifi_rsp_net_cred_get(uint16_t result,
                                             uint32_t credential_length,
                                             size_t credential_len,
                                             const void *credential_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x13,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_cred_get_t)),
    credential_len,
    credential_buf);
  app_wifi_set_rsp_net_cred_get_msg((struct app_wifi_packet *)xapi_msg, result, credential_length);
}

/* Functions for message commander_rsp_net_cred_delete */
static inline void app_wifi_set_rsp_net_cred_delete_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_net_cred_delete.result = result;
}

static inline void app_wifi_rsp_net_cred_delete(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x13,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_net_cred_delete_t)));
  app_wifi_set_rsp_net_cred_delete_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_common_get_firmware_version */
static inline void app_wifi_set_rsp_common_get_firmware_version_msg(struct app_wifi_packet *xapi_msg,
                                                                    uint16_t result,
                                                                    uint8_t chip_id,
                                                                    uint8_t rom_id,
                                                                    uint8_t major,
                                                                    uint8_t minor,
                                                                    uint8_t security_version,
                                                                    uint8_t patch_num,
                                                                    uint8_t customer_id,
                                                                    uint16_t build_num)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_common_get_firmware_version.result           = result;
  xapi_msg->data.rsp_common_get_firmware_version.chip_id          = chip_id;
  xapi_msg->data.rsp_common_get_firmware_version.rom_id           = rom_id;
  xapi_msg->data.rsp_common_get_firmware_version.major            = major;
  xapi_msg->data.rsp_common_get_firmware_version.minor            = minor;
  xapi_msg->data.rsp_common_get_firmware_version.security_version = security_version;
  xapi_msg->data.rsp_common_get_firmware_version.patch_num        = patch_num;
  xapi_msg->data.rsp_common_get_firmware_version.customer_id      = customer_id;
  xapi_msg->data.rsp_common_get_firmware_version.build_num        = build_num;
}

static inline void app_wifi_rsp_common_get_firmware_version(uint16_t result,
                                                            uint8_t chip_id,
                                                            uint8_t rom_id,
                                                            uint8_t major,
                                                            uint8_t minor,
                                                            uint8_t security_version,
                                                            uint8_t patch_num,
                                                            uint8_t customer_id,
                                                            uint16_t build_num)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x01,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_common_get_firmware_version_t)));
  app_wifi_set_rsp_common_get_firmware_version_msg((struct app_wifi_packet *)xapi_msg,
                                                   result,
                                                   chip_id,
                                                   rom_id,
                                                   major,
                                                   minor,
                                                   security_version,
                                                   patch_num,
                                                   customer_id,
                                                   build_num);
}

/* Functions for message commander_rsp_scan_start */
static inline void app_wifi_set_rsp_scan_start_msg(struct app_wifi_packet *xapi_msg,
                                                   uint16_t result,
                                                   uint8_t is_in_progress)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_scan_start.result         = result;
  xapi_msg->data.rsp_scan_start.is_in_progress = is_in_progress;
}

static inline void app_wifi_rsp_scan_start(uint16_t result, uint8_t is_in_progress)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x03,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_scan_start_t)));
  app_wifi_set_rsp_scan_start_msg((struct app_wifi_packet *)xapi_msg, result, is_in_progress);
}

/* Functions for message commander_rsp_scan_start_with_ssid */
static inline void app_wifi_set_rsp_scan_start_with_ssid_msg(struct app_wifi_packet *xapi_msg,
                                                             uint16_t result,
                                                             uint8_t is_in_progress)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_scan_start_with_ssid.result         = result;
  xapi_msg->data.rsp_scan_start_with_ssid.is_in_progress = is_in_progress;
}

static inline void app_wifi_rsp_scan_start_with_ssid(uint16_t result, uint8_t is_in_progress)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x03,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_scan_start_with_ssid_t)));
  app_wifi_set_rsp_scan_start_with_ssid_msg((struct app_wifi_packet *)xapi_msg, result, is_in_progress);
}

/* Functions for message commander_rsp_scan_set_advanced_configuration */
static inline void app_wifi_set_rsp_scan_set_advanced_configuration_msg(struct app_wifi_packet *xapi_msg,
                                                                        uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_scan_set_advanced_configuration.result = result;
}

static inline void app_wifi_rsp_scan_set_advanced_configuration(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x03,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_scan_set_advanced_configuration_t)));
  app_wifi_set_rsp_scan_set_advanced_configuration_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_scan_get_advanced_configuration */
static inline void app_wifi_set_rsp_scan_get_advanced_configuration_msg(struct app_wifi_packet *xapi_msg,
                                                                        uint16_t result,
                                                                        int32_t trigger_level,
                                                                        uint32_t trigger_level_change,
                                                                        uint16_t active_channel_time,
                                                                        uint16_t passive_channel_time,
                                                                        uint8_t enable_instant_scan,
                                                                        uint8_t enable_multi_probe)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_scan_get_advanced_configuration.result               = result;
  xapi_msg->data.rsp_scan_get_advanced_configuration.trigger_level        = trigger_level;
  xapi_msg->data.rsp_scan_get_advanced_configuration.trigger_level_change = trigger_level_change;
  xapi_msg->data.rsp_scan_get_advanced_configuration.active_channel_time  = active_channel_time;
  xapi_msg->data.rsp_scan_get_advanced_configuration.passive_channel_time = passive_channel_time;
  xapi_msg->data.rsp_scan_get_advanced_configuration.enable_instant_scan  = enable_instant_scan;
  xapi_msg->data.rsp_scan_get_advanced_configuration.enable_multi_probe   = enable_multi_probe;
}

static inline void app_wifi_rsp_scan_get_advanced_configuration(uint16_t result,
                                                                int32_t trigger_level,
                                                                uint32_t trigger_level_change,
                                                                uint16_t active_channel_time,
                                                                uint16_t passive_channel_time,
                                                                uint8_t enable_instant_scan,
                                                                uint8_t enable_multi_probe)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x03,
                                 0x03,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_scan_get_advanced_configuration_t)));
  app_wifi_set_rsp_scan_get_advanced_configuration_msg((struct app_wifi_packet *)xapi_msg,
                                                       result,
                                                       trigger_level,
                                                       trigger_level_change,
                                                       active_channel_time,
                                                       passive_channel_time,
                                                       enable_instant_scan,
                                                       enable_multi_probe);
}

/* Functions for message commander_rsp_scan_stop */
static inline void app_wifi_set_rsp_scan_stop_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_scan_stop.result = result;
}

static inline void app_wifi_rsp_scan_stop(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x03,
                                 0x04,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_scan_stop_t)));
  app_wifi_set_rsp_scan_stop_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_evt_scan_results_event */
static inline void app_wifi_set_evt_scan_results_event_msg(struct app_wifi_packet *xapi_msg,
                                                           uint8_t rf_channel,
                                                           uint8_t security_mode,
                                                           int8_t rssi,
                                                           uint8_t network_type,
                                                           const void *ssid,
                                                           const void *bssid)
{
  (void)xapi_msg;
  xapi_msg->data.evt_scan_results_event.rf_channel    = rf_channel;
  xapi_msg->data.evt_scan_results_event.security_mode = security_mode;
  xapi_msg->data.evt_scan_results_event.rssi          = rssi;
  xapi_msg->data.evt_scan_results_event.network_type  = network_type;
  memcpy(&xapi_msg->data.evt_scan_results_event.ssid, ssid, sizeof(app_wifi_scan_ssid_t));
  memcpy(&xapi_msg->data.evt_scan_results_event.bssid, bssid, sizeof(app_wifi_bssid_t));
}

static const struct xapi_event xapi_event_decl_wifi_scan_results_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x03,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_scan_results_event_t)) };

static inline bool app_wifi_evt_scan_results_event(uint8_t rf_channel,
                                                   uint8_t security_mode,
                                                   int8_t rssi,
                                                   uint8_t network_type,
                                                   const void *ssid,
                                                   const void *bssid)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_scan_results_event.event_header;
  app_wifi_set_evt_scan_results_event_msg((struct app_wifi_packet *)&xapi_msg,
                                          rf_channel,
                                          security_mode,
                                          rssi,
                                          network_type,
                                          ssid,
                                          bssid);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_scan_error_event */
static inline void app_wifi_set_evt_scan_error_event_msg(struct app_wifi_packet *xapi_msg, uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_scan_error_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_scan_error_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x03,
  0x01,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_scan_error_event_t)) };

static inline bool app_wifi_evt_scan_error_event(uint16_t status)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_scan_error_event.event_header;
  app_wifi_set_evt_scan_error_event_msg((struct app_wifi_packet *)&xapi_msg, status);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_scan_complete_event */
static inline void app_wifi_set_evt_scan_complete_event_msg(struct app_wifi_packet *xapi_msg, uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_scan_complete_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_scan_complete_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x03,
  0x02,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_scan_complete_event_t)) };

static inline bool app_wifi_evt_scan_complete_event(uint16_t status)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_scan_complete_event.event_header;
  app_wifi_set_evt_scan_complete_event_msg((struct app_wifi_packet *)&xapi_msg, status);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_ping_ipv4 */
static inline void app_wifi_set_rsp_ping_ipv4_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_ping_ipv4.result = result;
}

static inline void app_wifi_rsp_ping_ipv4(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x15,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_ping_ipv4_t)));
  app_wifi_set_rsp_ping_ipv4_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_evt_ping_ipv4_response_event */
static inline void app_wifi_set_evt_ping_ipv4_response_event_msg(struct app_wifi_packet *xapi_msg,
                                                                 uint32_t status,
                                                                 uint16_t ip_version,
                                                                 uint16_t ping_size,
                                                                 const void *ipv4_address)
{
  (void)xapi_msg;
  xapi_msg->data.evt_ping_ipv4_response_event.status     = status;
  xapi_msg->data.evt_ping_ipv4_response_event.ip_version = ip_version;
  xapi_msg->data.evt_ping_ipv4_response_event.ping_size  = ping_size;
  memcpy(&xapi_msg->data.evt_ping_ipv4_response_event.ipv4_address, ipv4_address, sizeof(ipv4_addr));
}

static const struct xapi_event xapi_event_decl_wifi_ping_ipv4_response_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x15,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_ping_ipv4_response_event_t)) };

static inline bool app_wifi_evt_ping_ipv4_response_event(uint32_t status,
                                                         uint16_t ip_version,
                                                         uint16_t ping_size,
                                                         const void *ipv4_address)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_ping_ipv4_response_event.event_header;
  app_wifi_set_evt_ping_ipv4_response_event_msg((struct app_wifi_packet *)&xapi_msg,
                                                status,
                                                ip_version,
                                                ping_size,
                                                ipv4_address);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_client_set_roam_configuration */
static inline void app_wifi_set_rsp_client_set_roam_configuration_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_client_set_roam_configuration.result = result;
}

static inline void app_wifi_rsp_client_set_roam_configuration(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x04,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_client_set_roam_configuration_t)));
  app_wifi_set_rsp_client_set_roam_configuration_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_client_get_roam_configuration */
static inline void app_wifi_set_rsp_client_get_roam_configuration_msg(struct app_wifi_packet *xapi_msg,
                                                                      uint16_t result,
                                                                      int32_t trigger_level,
                                                                      uint32_t trigger_level_change)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_client_get_roam_configuration.result               = result;
  xapi_msg->data.rsp_client_get_roam_configuration.trigger_level        = trigger_level;
  xapi_msg->data.rsp_client_get_roam_configuration.trigger_level_change = trigger_level_change;
}

static inline void app_wifi_rsp_client_get_roam_configuration(uint16_t result,
                                                              int32_t trigger_level,
                                                              uint32_t trigger_level_change)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x04,
                                 0x03,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_client_get_roam_configuration_t)));
  app_wifi_set_rsp_client_get_roam_configuration_msg((struct app_wifi_packet *)xapi_msg,
                                                     result,
                                                     trigger_level,
                                                     trigger_level_change);
}

/* Functions for message commander_evt_client_join_event */
static inline void app_wifi_set_evt_client_join_event_msg(struct app_wifi_packet *xapi_msg, uint8_t is_connected)
{
  (void)xapi_msg;
  xapi_msg->data.evt_client_join_event.is_connected = is_connected;
}

static const struct xapi_event xapi_event_decl_wifi_client_join_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x04,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_client_join_event_t)) };

static inline bool app_wifi_evt_client_join_event(uint8_t is_connected)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_client_join_event.event_header;
  app_wifi_set_evt_client_join_event_msg((struct app_wifi_packet *)&xapi_msg, is_connected);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_client_stats_response_event */
static inline void app_wifi_set_evt_client_stats_response_event_msg(struct app_wifi_packet *xapi_msg,
                                                                    uint32_t timestamp,
                                                                    uint8_t state_code,
                                                                    uint8_t reason_code,
                                                                    uint8_t channel,
                                                                    uint8_t rssi,
                                                                    const void *bssid)
{
  (void)xapi_msg;
  xapi_msg->data.evt_client_stats_response_event.timestamp   = timestamp;
  xapi_msg->data.evt_client_stats_response_event.state_code  = state_code;
  xapi_msg->data.evt_client_stats_response_event.reason_code = reason_code;
  xapi_msg->data.evt_client_stats_response_event.channel     = channel;
  xapi_msg->data.evt_client_stats_response_event.rssi        = rssi;
  memcpy(&xapi_msg->data.evt_client_stats_response_event.bssid, bssid, sizeof(app_wifi_bssid_t));
}

static const struct xapi_event xapi_event_decl_wifi_client_stats_response_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x04,
  0x01,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_client_stats_response_event_t)) };

static inline bool app_wifi_evt_client_stats_response_event(uint32_t timestamp,
                                                            uint8_t state_code,
                                                            uint8_t reason_code,
                                                            uint8_t channel,
                                                            uint8_t rssi,
                                                            const void *bssid)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_client_stats_response_event.event_header;
  app_wifi_set_evt_client_stats_response_event_msg((struct app_wifi_packet *)&xapi_msg,
                                                   timestamp,
                                                   state_code,
                                                   reason_code,
                                                   channel,
                                                   rssi,
                                                   bssid);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_rsp_mqtt_client_init */
static inline void app_wifi_set_rsp_mqtt_client_init_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_init.result = result;
}

static inline void app_wifi_rsp_mqtt_client_init(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x00,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_init_t)));
  app_wifi_set_rsp_mqtt_client_init_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_set_broker */
static inline void app_wifi_set_rsp_mqtt_client_set_broker_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_set_broker.result = result;
}

static inline void app_wifi_rsp_mqtt_client_set_broker(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x01,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_set_broker_t)));
  app_wifi_set_rsp_mqtt_client_set_broker_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_set_last_will_topic */
static inline void app_wifi_set_rsp_mqtt_client_set_last_will_topic_msg(struct app_wifi_packet *xapi_msg,
                                                                        uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_set_last_will_topic.result = result;
}

static inline void app_wifi_rsp_mqtt_client_set_last_will_topic(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x02,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_set_last_will_topic_t)));
  app_wifi_set_rsp_mqtt_client_set_last_will_topic_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_set_last_will_message */
static inline void app_wifi_set_rsp_mqtt_client_set_last_will_message_msg(struct app_wifi_packet *xapi_msg,
                                                                          uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_set_last_will_message.result = result;
}

static inline void app_wifi_rsp_mqtt_client_set_last_will_message(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x03,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_set_last_will_message_t)));
  app_wifi_set_rsp_mqtt_client_set_last_will_message_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_set_client_config */
static inline void app_wifi_set_rsp_mqtt_client_set_client_config_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_set_client_config.result = result;
}

static inline void app_wifi_rsp_mqtt_client_set_client_config(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x04,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_set_client_config_t)));
  app_wifi_set_rsp_mqtt_client_set_client_config_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_deinit */
static inline void app_wifi_set_rsp_mqtt_client_deinit_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_deinit.result = result;
}

static inline void app_wifi_rsp_mqtt_client_deinit(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x12,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_deinit_t)));
  app_wifi_set_rsp_mqtt_client_deinit_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_get_broker */
static inline void app_wifi_set_rsp_mqtt_client_get_broker_msg(struct app_wifi_packet *xapi_msg,
                                                               uint16_t result,
                                                               const void *ip_address,
                                                               uint16_t port,
                                                               uint8_t is_connection_encrypted,
                                                               uint16_t connect_timeout,
                                                               uint16_t keep_alive_interval,
                                                               uint16_t keep_alive_retires)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_get_broker.result = result;
  memcpy(&xapi_msg->data.rsp_mqtt_client_get_broker.ip_address, ip_address, sizeof(ipv4_addr));
  xapi_msg->data.rsp_mqtt_client_get_broker.port                    = port;
  xapi_msg->data.rsp_mqtt_client_get_broker.is_connection_encrypted = is_connection_encrypted;
  xapi_msg->data.rsp_mqtt_client_get_broker.connect_timeout         = connect_timeout;
  xapi_msg->data.rsp_mqtt_client_get_broker.keep_alive_interval     = keep_alive_interval;
  xapi_msg->data.rsp_mqtt_client_get_broker.keep_alive_retires      = keep_alive_retires;
}

static inline void app_wifi_rsp_mqtt_client_get_broker(uint16_t result,
                                                       const void *ip_address,
                                                       uint16_t port,
                                                       uint8_t is_connection_encrypted,
                                                       uint16_t connect_timeout,
                                                       uint16_t keep_alive_interval,
                                                       uint16_t keep_alive_retires)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0C,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_get_broker_t)));
  app_wifi_set_rsp_mqtt_client_get_broker_msg((struct app_wifi_packet *)xapi_msg,
                                              result,
                                              ip_address,
                                              port,
                                              is_connection_encrypted,
                                              connect_timeout,
                                              keep_alive_interval,
                                              keep_alive_retires);
}

/* Functions for message commander_rsp_mqtt_client_get_last_will_topic */
static inline void app_wifi_set_rsp_mqtt_client_get_last_will_topic_msg(struct app_wifi_packet *xapi_msg,
                                                                        uint16_t result,
                                                                        uint8_t is_retained,
                                                                        uint32_t qos_level)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_get_last_will_topic.result      = result;
  xapi_msg->data.rsp_mqtt_client_get_last_will_topic.is_retained = is_retained;
  xapi_msg->data.rsp_mqtt_client_get_last_will_topic.qos_level   = qos_level;
}

static inline uint8_t *app_wifi_get_rsp_mqtt_client_get_last_will_topic_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)->data.rsp_mqtt_client_get_last_will_topic.topic.data;
}

static inline void app_wifi_rsp_mqtt_client_get_last_will_topic(uint16_t result,
                                                                uint8_t is_retained,
                                                                uint32_t qos_level,
                                                                size_t topic_len,
                                                                const void *topic_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0D,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_get_last_will_topic_t)),
    topic_len,
    topic_buf);
  app_wifi_set_rsp_mqtt_client_get_last_will_topic_msg((struct app_wifi_packet *)xapi_msg,
                                                       result,
                                                       is_retained,
                                                       qos_level);
}

/* Functions for message commander_rsp_mqtt_client_get_last_will_message */
static inline void app_wifi_set_rsp_mqtt_client_get_last_will_message_msg(struct app_wifi_packet *xapi_msg,
                                                                          uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_get_last_will_message.result = result;
}

static inline uint8_t *app_wifi_get_rsp_mqtt_client_get_last_will_message_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)
    ->data.rsp_mqtt_client_get_last_will_message.message.data;
}

static inline void app_wifi_rsp_mqtt_client_get_last_will_message(uint16_t result,
                                                                  size_t message_len,
                                                                  const void *message_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0E,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_get_last_will_message_t)),
    message_len,
    message_buf);
  app_wifi_set_rsp_mqtt_client_get_last_will_message_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_get_client_config */
static inline void app_wifi_set_rsp_mqtt_client_get_client_config_msg(struct app_wifi_packet *xapi_msg,
                                                                      uint16_t result,
                                                                      uint8_t is_auto_connect,
                                                                      uint8_t retry_count,
                                                                      uint16_t min_back_off_time,
                                                                      uint16_t max_back_off_time,
                                                                      uint8_t is_clean_session,
                                                                      uint32_t version,
                                                                      uint16_t client_port,
                                                                      uint32_t credential_id,
                                                                      uint32_t tls_flag)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_get_client_config.result            = result;
  xapi_msg->data.rsp_mqtt_client_get_client_config.is_auto_connect   = is_auto_connect;
  xapi_msg->data.rsp_mqtt_client_get_client_config.retry_count       = retry_count;
  xapi_msg->data.rsp_mqtt_client_get_client_config.min_back_off_time = min_back_off_time;
  xapi_msg->data.rsp_mqtt_client_get_client_config.max_back_off_time = max_back_off_time;
  xapi_msg->data.rsp_mqtt_client_get_client_config.is_clean_session  = is_clean_session;
  xapi_msg->data.rsp_mqtt_client_get_client_config.version           = version;
  xapi_msg->data.rsp_mqtt_client_get_client_config.client_port       = client_port;
  xapi_msg->data.rsp_mqtt_client_get_client_config.credential_id     = credential_id;
  xapi_msg->data.rsp_mqtt_client_get_client_config.tls_flag          = tls_flag;
}

static inline void app_wifi_rsp_mqtt_client_get_client_config(uint16_t result,
                                                              uint8_t is_auto_connect,
                                                              uint8_t retry_count,
                                                              uint16_t min_back_off_time,
                                                              uint16_t max_back_off_time,
                                                              uint8_t is_clean_session,
                                                              uint32_t version,
                                                              uint16_t client_port,
                                                              uint32_t credential_id,
                                                              uint32_t tls_flag)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0F,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_get_client_config_t)));
  app_wifi_set_rsp_mqtt_client_get_client_config_msg((struct app_wifi_packet *)xapi_msg,
                                                     result,
                                                     is_auto_connect,
                                                     retry_count,
                                                     min_back_off_time,
                                                     max_back_off_time,
                                                     is_clean_session,
                                                     version,
                                                     client_port,
                                                     credential_id,
                                                     tls_flag);
}

/* Functions for message commander_rsp_mqtt_client_connect */
static inline void app_wifi_set_rsp_mqtt_client_connect_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_connect.result = result;
}

static inline void app_wifi_rsp_mqtt_client_connect(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x06,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_connect_t)));
  app_wifi_set_rsp_mqtt_client_connect_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_disconnect */
static inline void app_wifi_set_rsp_mqtt_client_disconnect_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_disconnect.result = result;
}

static inline void app_wifi_rsp_mqtt_client_disconnect(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x11,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_disconnect_t)));
  app_wifi_set_rsp_mqtt_client_disconnect_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_subscribe */
static inline void app_wifi_set_rsp_mqtt_client_subscribe_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_subscribe.result = result;
}

static inline void app_wifi_rsp_mqtt_client_subscribe(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x07,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_subscribe_t)));
  app_wifi_set_rsp_mqtt_client_subscribe_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_unsubscribe */
static inline void app_wifi_set_rsp_mqtt_client_unsubscribe_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_unsubscribe.result = result;
}

static inline void app_wifi_rsp_mqtt_client_unsubscribe(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0B,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_unsubscribe_t)));
  app_wifi_set_rsp_mqtt_client_unsubscribe_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_publish_topic */
static inline void app_wifi_set_rsp_mqtt_client_publish_topic_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_publish_topic.result = result;
}

static inline void app_wifi_rsp_mqtt_client_publish_topic(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x08,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_publish_topic_t)));
  app_wifi_set_rsp_mqtt_client_publish_topic_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_publish_message */
static inline void app_wifi_set_rsp_mqtt_client_publish_message_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_publish_message.result = result;
}

static inline void app_wifi_rsp_mqtt_client_publish_message(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x09,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_publish_message_t)));
  app_wifi_set_rsp_mqtt_client_publish_message_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_publish */
static inline void app_wifi_set_rsp_mqtt_client_publish_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_publish.result = result;
}

static inline void app_wifi_rsp_mqtt_client_publish(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x0A,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_publish_t)));
  app_wifi_set_rsp_mqtt_client_publish_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_set_client_id */
static inline void app_wifi_set_rsp_mqtt_client_set_client_id_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_set_client_id.result = result;
}

static inline void app_wifi_rsp_mqtt_client_set_client_id(uint16_t result)
{
  void *xapi_msg = commander_create_xapi_response(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x05,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_set_client_id_t)));
  app_wifi_set_rsp_mqtt_client_set_client_id_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_rsp_mqtt_client_get_client_id */
static inline void app_wifi_set_rsp_mqtt_client_get_client_id_msg(struct app_wifi_packet *xapi_msg, uint16_t result)
{
  (void)xapi_msg;
  xapi_msg->data.rsp_mqtt_client_get_client_id.result = result;
}

static inline uint8_t *app_wifi_get_rsp_mqtt_client_get_client_id_data_buf()
{
  return ((struct app_wifi_packet *)app_internal_xapi_rsp_msg_buf)->data.rsp_mqtt_client_get_client_id.client_id.data;
}

static inline void app_wifi_rsp_mqtt_client_get_client_id(uint16_t result,
                                                          size_t client_id_len,
                                                          const void *client_id_buf)
{
  void *xapi_msg = commander_create_xapi_response_data(
    API_INTERNAL_XAPI_MSG_HEADER(0x10,
                                 0x10,
                                 (uint8_t)app_xapi_msg_type_rsp | (uint8_t)app_xapi_dev_type_wifi,
                                 sizeof(app_wifi_rsp_mqtt_client_get_client_id_t)),
    client_id_len,
    client_id_buf);
  app_wifi_set_rsp_mqtt_client_get_client_id_msg((struct app_wifi_packet *)xapi_msg, result);
}

/* Functions for message commander_evt_mqtt_client_connected_event */
static inline void app_wifi_set_evt_mqtt_client_connected_event_msg(struct app_wifi_packet *xapi_msg, uint32_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_connected_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_connected_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x10,
  0x00,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_mqtt_client_connected_event_t)) };

static inline bool app_wifi_evt_mqtt_client_connected_event(uint32_t status)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_connected_event.event_header;
  app_wifi_set_evt_mqtt_client_connected_event_msg((struct app_wifi_packet *)&xapi_msg, status);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_error_event */
static inline void app_wifi_set_evt_mqtt_client_error_event_msg(struct app_wifi_packet *xapi_msg, uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_error_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_error_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x10,
  0x01,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_mqtt_client_error_event_t)) };

static inline bool app_wifi_evt_mqtt_client_error_event(uint16_t status)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_error_event.event_header;
  app_wifi_set_evt_mqtt_client_error_event_msg((struct app_wifi_packet *)&xapi_msg, status);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_message_received_on_topic */
static inline void app_wifi_set_evt_mqtt_client_message_received_on_topic_msg(struct app_wifi_packet *xapi_msg)
{
  (void)xapi_msg;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_message_received_on_topic = {
  API_INTERNAL_XAPI_MSG_HEADER(0x10,
                               0x02,
                               (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
                               sizeof(app_wifi_evt_mqtt_client_message_received_on_topic_t))
};

static inline bool app_wifi_evt_mqtt_client_message_received_on_topic(size_t message_topic_len,
                                                                      const void *message_topic_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_message_received_on_topic.event_header;
  app_wifi_set_evt_mqtt_client_message_received_on_topic_msg((struct app_wifi_packet *)&xapi_msg);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, message_topic_len, message_topic_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_message_received_content */
static inline void app_wifi_set_evt_mqtt_client_message_received_content_msg(struct app_wifi_packet *xapi_msg)
{
  (void)xapi_msg;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_message_received_content = {
  API_INTERNAL_XAPI_MSG_HEADER(0x10,
                               0x03,
                               (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
                               sizeof(app_wifi_evt_mqtt_client_message_received_content_t))
};

static inline bool app_wifi_evt_mqtt_client_message_received_content(size_t message_content_len,
                                                                     const void *message_content_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_message_received_content.event_header;
  app_wifi_set_evt_mqtt_client_message_received_content_msg((struct app_wifi_packet *)&xapi_msg);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, message_content_len, message_content_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_subscribe_state_event */
static inline void app_wifi_set_evt_mqtt_client_subscribe_state_event_msg(struct app_wifi_packet *xapi_msg,
                                                                          uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_subscribe_state_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_subscribe_state_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x10,
  0x04,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_mqtt_client_subscribe_state_event_t)) };

static inline bool app_wifi_evt_mqtt_client_subscribe_state_event(uint16_t status,
                                                                  size_t topic_len,
                                                                  const void *topic_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_subscribe_state_event.event_header;
  app_wifi_set_evt_mqtt_client_subscribe_state_event_msg((struct app_wifi_packet *)&xapi_msg, status);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, topic_len, topic_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_unsubscribe_state_event */
static inline void app_wifi_set_evt_mqtt_client_unsubscribe_state_event_msg(struct app_wifi_packet *xapi_msg,
                                                                            uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_unsubscribe_state_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_unsubscribe_state_event = {
  API_INTERNAL_XAPI_MSG_HEADER(0x10,
                               0x05,
                               (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
                               sizeof(app_wifi_evt_mqtt_client_unsubscribe_state_event_t))
};

static inline bool app_wifi_evt_mqtt_client_unsubscribe_state_event(uint16_t status,
                                                                    size_t topic_len,
                                                                    const void *topic_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_unsubscribe_state_event.event_header;
  app_wifi_set_evt_mqtt_client_unsubscribe_state_event_msg((struct app_wifi_packet *)&xapi_msg, status);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, topic_len, topic_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_publish_state_event */
static inline void app_wifi_set_evt_mqtt_client_publish_state_event_msg(struct app_wifi_packet *xapi_msg,
                                                                        uint16_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_publish_state_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_publish_state_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x10,
  0x06,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_mqtt_client_publish_state_event_t)) };

static inline bool app_wifi_evt_mqtt_client_publish_state_event(uint16_t status,
                                                                size_t topic_len,
                                                                const void *topic_buf)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_publish_state_event.event_header;
  app_wifi_set_evt_mqtt_client_publish_state_event_msg((struct app_wifi_packet *)&xapi_msg, status);

  sl_status_t sc = app_wifi_push_event_with_data(&xapi_msg, topic_len, topic_buf);
  return (sc == SL_STATUS_OK) ? true : false;
}
/* Functions for message commander_evt_mqtt_client_disconnected_event */
static inline void app_wifi_set_evt_mqtt_client_disconnected_event_msg(struct app_wifi_packet *xapi_msg,
                                                                       uint32_t status)
{
  (void)xapi_msg;
  xapi_msg->data.evt_mqtt_client_disconnected_event.status = status;
}

static const struct xapi_event xapi_event_decl_wifi_mqtt_client_disconnected_event = { API_INTERNAL_XAPI_MSG_HEADER(
  0x10,
  0x07,
  (uint8_t)app_xapi_msg_type_evt | (uint8_t)app_xapi_dev_type_wifi,
  sizeof(app_wifi_evt_mqtt_client_disconnected_event_t)) };

static inline bool app_wifi_evt_mqtt_client_disconnected_event(uint32_t status)
{
  app_wifi_msg_t xapi_msg;
  xapi_msg.header = xapi_event_decl_wifi_mqtt_client_disconnected_event.event_header;
  app_wifi_set_evt_mqtt_client_disconnected_event_msg((struct app_wifi_packet *)&xapi_msg, status);
  sl_status_t sc = app_wifi_push_event(&xapi_msg);
  return (sc == SL_STATUS_OK) ? true : false;
}

#ifdef __cplusplus
}
#endif

#endif