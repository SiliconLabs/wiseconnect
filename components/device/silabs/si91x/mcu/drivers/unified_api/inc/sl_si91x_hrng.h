/******************************************************************************
* @file sl_si91x_hrng.h
* @brief HRNG API implementation
*******************************************************************************
* # License
* <b>Copyright 2024 Silicon Laboratories Inc. www.silabs.com</b>
*******************************************************************************
*
* SPDX-License-Identifier: Zlib
*
* The licensor of this software is Silicon Laboratories Inc.
*
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
*
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
*
* 1. The origin of this software must not be misrepresented; you must not
*    claim that you wrote the original software. If you use this software
*    in a product, an acknowledgment in the product documentation would be
*    appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
*    misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*
******************************************************************************/

#ifndef SL_SI91X_HRNG_H_
#define SL_SI91X_HRNG_H_

#include "rsi_rng.h"
#include "sl_status.h"

/***************************************************************************/ /**
* @addtogroup HRNG
* @ingroup SI91X_PERIPHERAL_APIS
* @{
******************************************************************************/

/** @brief Enable clock for HWRNG */
#define SL_SI91X_HWRNG_CLK_ENABLE HWRNG_CLK_ENABLE

#define SL_SI91X_HWRNG_MAX_BYTES 254 ///< Maximum number of bytes that can be generated by the HWRNG.
#define SL_SI91X_HWRNG_MIN_BYTES 1   ///< Minimum number of bytes that can be generated by the HWRNG.

/**
 * @brief Enumeration for HRNG modes.
 * 
 * This enumeration defines the modes in which the Hardware Random Number Generator (HRNG) can operate.
 */
typedef enum sl_si91x_hrng_mode {
  SL_SI91X_HRNG_TRUE_RANDOM   = RSI_RNG_TRUE_RANDOM,  ///< True random number generation mode.
  SL_SI91X_HRNG_PSEUDO_RANDOM = RSI_RNG_PSEUDO_RANDOM ///< Pseudo-random number generation mode.
} sl_si91x_hrng_mode_t;

/***************************************************************************/
/**
 * @brief
 *   Initialize the HRNG peripheral.
 *
 * @details
 *   This function initializes the HRNG peripheral, setting up the necessary
 *   configurations for random number generation. It must be called before any
 *   HRNG functionality can be utilized.
 *
 * @return 
 *   - SL_STATUS_OK - if the initialization was successful.
 *   - SL_STATUS_FAIL - if the initialization failed due to an error.
 * 
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 *
 ******************************************************************************/
sl_status_t sl_si91x_hrng_init(void);

/***************************************************************************/
/**
 * @brief
 *   Start the Hardware Random Number Generator (HRNG).
 *
 * @details
 *   This function starts the HRNG in the specified mode, allowing either true random 
 *   or pseudo-random number generation based on the selected mode. It prepares the 
 *   HRNG hardware to generate random numbers.
 *
 * @param[in] hrng_mode
 *   Mode for random number generation:
 *   - SL_SI91X_HRNG_TRUE_RANDOM: True random number generation.
 *   - SL_SI91X_HRNG_PSEUDO_RANDOM: Pseudo-random number generation.
 * @pre Pre-conditions:
 *  - The HRNG peripheral clocks must be enabled using @ref sl_si91x_hrng_init.
 * @return
 *   - SL_STATUS_OK: Successfully started the HRNG.
 *   - SL_STATUS_INVALID_PARAMETER: Invalid mode or pointer.
 * 
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 ******************************************************************************/
sl_status_t sl_si91x_hrng_start(sl_si91x_hrng_mode_t hrng_mode);

/***************************************************************************/
/**
 * @brief
 *   Retrieve random bytes generated by the HRNG.
 *
 * @details
 *   This function reads a specified number of random bytes from the HRNG hardware 
 *   and stores them in the provided buffer. It ensures that the requested number of 
 *   bytes is fetched from the HRNG peripheral.
 *
 * @param[out] random_bytes
 *   Buffer where the generated random bytes will be stored.
 *
 * @param[in] number_of_bytes
 *   The number of random bytes to read from the HRNG.
 *   The number of bytes must be within the range of 1 to 254.
 * 
 * @pre Pre-conditions:
 *  - The HRNG peripheral clocks must be enabled using @ref sl_si91x_hrng_init.
 *  - The HRNG must be started using @ref sl_si91x_hrng_start.
 * @return
 *   - SL_STATUS_OK: Successfully retrieved the random bytes.
 *   - SL_STATUS_INVALID_PARAMETER: Invalid pointer or number of bytes.
 *   - SL_STATUS_FAIL: Failed to retrieve random bytes.
 *
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 ******************************************************************************/
sl_status_t sl_si91x_hrng_get_bytes(uint32_t *random_bytes, uint8_t number_of_bytes);

/***************************************************************************/
/**
 * @brief
 *    Reads random data from the HRNG using the LFSR (Linear-Feedback Shift Register) input latch.
 *
 * @details
 *    This function reads random data from the HRNG using the LFSR input latch register.
 *    It first enables the LFSR, reads the specified number of bytes, and then disables
 *    the LFSR. 
 *  @note Data is valid only when the LFSR_32_BIT_INPUT_VALID bit is set.
 *
 * @param[in] number_of_bytes
 *   The number of random bytes to read from the HRNG.
 *   The number of bytes must be within the range of 1 to 254.
 *
 * @param[out] random_bytes
 *    Pointer to an array where the random data will be stored.
 * @pre Pre-conditions:
 *  - The HRNG peripheral clocks must be enabled using @ref sl_si91x_hrng_init.
 *  - The HRNG must be started using @ref sl_si91x_hrng_start.
 * @return
 *    - SL_STATUS_OK: If the random data was read successfully.
 *    - SL_STATUS_FAIL: If there was an error reading the random data.
 * 
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 ******************************************************************************/
sl_status_t sl_si91x_hrng_read_lfsr_input(uint8_t number_of_bytes, uint32_t *random_bytes);

/***************************************************************************/
/**
 * @brief
 *   Stop the Hardware Random Number Generator (HRNG).
 *
 * @details
 *   This function disables the HRNG by stopping the random number generation 
 *   process and halting any ongoing operations within the HRNG peripheral.
 * 
 * @pre Pre-conditions:
 *  - The HRNG peripheral clocks must be enabled using @ref sl_si91x_hrng_init.
 *  - The HRNG must be started using @ref sl_si91x_hrng_start.
 * @return
 *    - SL_STATUS_OK: If the HRNG stopped successfully.
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 ******************************************************************************/
sl_status_t sl_si91x_hrng_stop(void);

/***************************************************************************/
/**
 * @brief
 *   Disable the HRNG peripheral clocks.
 *
 * @details
 *   This function disables the HRNG clocks, effectively shutting down the 
 *   HRNG peripheral to conserve power or halt its operations when not in use.
 * @pre Pre-conditions:
 *  - The HRNG peripheral clocks must be enabled using @ref sl_si91x_hrng_init.
 *  - The HRNG must be stopped using @ref sl_si91x_hrng_stop.
 * @return
 *   SL_STATUS_OK if the operation was successful.
 *   SL_STATUS_FAIL indicates that the operation failed due to an error.
 * 
 * For more information on status codes, see [SL STATUS DOCUMENTATION](https://docs.silabs.com/gecko-platform/latest/platform-common/status).
 ******************************************************************************/
sl_status_t sl_si91x_hrng_deinit(void);

/// @} end group DMA ********************************************************/

// ******** THE REST OF THE FILE IS DOCUMENTATION ONLY !***********************
/**
 * @addtogroup HRNG
 * @{
 *
 *   @details
 *
 *   @n @section HRNG_Intro Introduction
 *
 * The Hardware Random Number Generator (HRNG) module provides a mechanism for generating random numbers that are crucial
 * for cryptographic operations, secure communications, and simulations.
 * HRNG supports both true random number generation and pseudo-random number generation modes.
 *
 * Common use cases include:
 * - **Cryptographic Key Generation**: Generating keys for encryption algorithms.
 * - **Secure Communication**: Providing random numbers for session keys and data encryption.
 * - **Simulations and Randomization**: Generating random inputs for simulations and randomized algorithms.
 *
 * @section HRNG_Configuration Configuration
 *
 * The HRNG module can be configured using the following parameters:
 * 
 * **Modes**: 
 *  - **Pseudo-random number:** Pseudo-random number rely on mathematical algorithms to generate sequences of numbers that resemble randomness. These algorithms are deterministic, meaning they always produce the same sequence of numbers when initialized with the same starting value, referred to as a seed.
 *  - **True Random Number :** True Random Number create random numbers using physical processes like electronic noise, radioactive decay, or other unpredictable natural events.
 *
 * The random number generator can be initialized, started, and stopped using the following functions:
 * - Initialize the HRNG : @ref sl_si91x_hrng_init
 * - Start the HRNG : @ref sl_si91x_hrng_start
 * - Get random bytes: @ref sl_si91x_hrng_get_bytes
 * - Stop the HRNG : @ref sl_si91x_hrng_stop
 * - Deinitialize the HRNG : @ref sl_si91x_hrng_deinit
 *
 * @section HRNG_Usage Usage
 *
 * To use the HRNG module:
 * 1. Enable the HRNG peripheral clocks using @ref sl_si91x_hrng_init.
 * 2. Start the HRNG using @ref sl_si91x_hrng_start.
 * 3. Retrieve the random numbers using @ref sl_si91x_hrng_get_bytes.
 * 4. Stop the HRNG using @ref sl_si91x_hrng_stop.
 * 5. Disable the HRNG peripheral clocks using @ref sl_si91x_hrng_deinit.
 *
 *** @} (end addtogroup HRNG) */
/***************************************************************************** */

#ifdef __cplusplus
}
#endif

#endif /*SL_SI917_HRNG_*/
