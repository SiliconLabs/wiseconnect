/***************************************************************************//**
 * GCC Linker script for Silicon Labs devices
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

{#-
  Device specific sizes and addresses. These variables describes the physical
  memory of the device.
#}
{%- set sram_addr = device_ram_addr | first %}
{%- set sram_size = device_ram_size | first %}
{%- set flash_addr = device_flash_addr | first %}
{%- set flash_size = device_flash_size | first %}
{%- set flash_page_size = device_flash_page_size | first %}

{%- if udma_enable %}
  {%- set udma0_main_size = udma0_size | sum %}
  {%- set udma0_start_addr = udma0 | sum %}
  {%- set udma1_main_size = udma1_size | sum %}
  {%- set udma1_start_addr = udma1 | sum %}
{%- endif %}

{#-
  Application specific sizes. Here we start to calculate the application view
  of the physical memory.
#}
{%- set app_flash_start = flash_addr %}
{%- set app_flash_end = flash_addr + flash_size %}
{%- set app_ram_start = sram_addr %}
{%- set app_ram_end = sram_addr + sram_size %}

{#-
  Calculate application flash and ram size based on start and end address.
#}
{%- set app_flash_size = app_flash_end - app_flash_start %}
{%- set app_ram_size = app_ram_end - app_ram_start %}

{%- if udma_enable %}
  {%- set udma_buffer = udma_buffer | sum %}
  {%- set app_ram_size = app_ram_size - udma_buffer %}
  {%- set udma0_start_addr = app_ram_size %}
  {%- set udma1_start_addr = udma1_start_addr -  udma_buffer%}
{%- endif %}

{%- set rtt = 0 %}
{% if linker_rtt_section is defined %}
{%-   set rtt = 1 %}
{% endif %}

{%- if nvm3_flash_size %}
	{%- set nvm_size = nvm3_size | first%}
	{%- set app_flash_size = app_flash_size - nvm_size %}
{%- endif %}
 MEMORY
 {
   rom   (rx)  : ORIGIN = 0x{{ '%0x' % app_flash_start }}, LENGTH = 0x{{ '%0x' % app_flash_size }}
   ram   (rwx) : ORIGIN = 0x{{ '%0x' % app_ram_start }}, LENGTH = 0x{{ '%0x' % app_ram_size }}
 }

{%- if udma_enable %}
 MEMORY
 {
   udma0   (rwx)  : ORIGIN = 0x{{ '%0x' % udma0_start_addr }}, LENGTH = 0x{{ '%0x' % udma0_main_size }}
   udma1   (rwx)  : ORIGIN = 0x{{ '%0x' % udma1_start_addr }}, LENGTH = 0x{{ '%0x' % udma1_main_size }}
 }
{%- endif %}

ENTRY(Reset_Handler)
 
SECTIONS
{
	.text :
	{
		KEEP(*(.isr_vector))
		{% if not EXECUTION_FROM_RAM_PS2 %}
		{% if not RAM_EXECUTION %}	    
                *(.text*)        
		{% endif %}
		{% if EXECUTION_FROM_RAM %}
		KEEP(*(.reset_handler))
		*(EXCLUDE_FILE( *rsi_common.o *rsi_driver.o *rsi_driver_event_handlers.o *rsi_events.o *rsi_os_none.o *rsi_pkt_mgmt.o *rsi_queue.o *rsi_scheduler.o *rsi_timer.o *rsi_utils.o *rsi_wlan.o *rsi_common_apis.o *rsi_wlan_apis.o *rsi_apis_non_rom.o *rsi_hal_mcu_timer.o *rsi_hal_mcu_interrupt.o *rsi_hal_mcu_m4.o *rsi_hal_mcu_platform_init.o *rsi_apis_rom.o *rsi_events_rom.o *rsi_hal_mcu_m4_rom.o *rsi_hal_mcu_m4_ram.o *rsi_pkt_mgmt_rom.o *rsi_queue_rom.o *rsi_scheduler_rom.o *rsi_socket_rom.o *rsi_utils_rom.o *rsi_nwk_rom.o *rsi_os_wrapper.o *port.o *heap_4.o *timers.o *croutine.o *event_groups.o *list.o *queue.o *tasks.o *stream_buffer.o *network_sapi_wrapper.o *rsi_deepsleep_soc.o ) .text*)
		{% endif %}
		{% if not EXECUTION_FROM_RAM %}
		*(EXCLUDE_FILE(*rsi_deepsleep_soc.o *rsi_hal_mcu_m4_ram.o) .text*)
		KEEP(*(.init))
		KEEP(*(.fini))
		{% endif %}
		{% endif %}
		/* .ctors */
		*crtbegin.o(.ctors)
		*crtbegin?.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)
		
		/* .dtors */
		*crtbegin.o(.dtors)
		*crtbegin?.o(.dtors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
		*(SORT(.dtors.*))
		*(.dtors)
		{% if not EXECUTION_FROM_RAM_PS2 %}
		{% if not EXECUTION_FROM_RAM %}
		*(.rodata*)
		{% endif %}
		{% if not RAM_EXECUTION %}
		*(.rodata*)
		{% endif %}
		{% endif %}
		KEEP(*(.eh_fram e*))
	} > rom 
	
	.ARM.extab : 
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} > rom 
	
	__exidx_start = .;
	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	} > rom 
	__exidx_end = .;
	__etext = .;
	
	/* _sidata is used in coide startup code */
	_sidata = __etext;
	
	.data :
	{
		__data_start__ = .;
		
		/* _sdata is used in coide startup code */
		_sdata = __data_start__;
		{% if EXECUTION_FROM_RAM %}
		KEEP(*(.ramVector))
		KEEP(*(.init))
		KEEP(*(.fini))
		*(.rodata*)
		{% endif %}
		{% if EXECUTION_FROM_RAM_PS2 %}
		KEEP(*(.ramVector))
		KEEP(*(.init))
		KEEP(*(.fini))
		*(.rodata*)
		*(.text*) 
		{% endif %}
		*(vtable)
		*(.data*)
		{% if EXECUTION_FROM_RAM %}
		*rsi_common.o(.text*)
		*rsi_driver.o(.text*)
		*rsi_driver_event_handlers.o(.text*)
		*rsi_events.o(.text*)
		*rsi_os_none.o(.text*)
		*rsi_pkt_mgmt.o(.text*)
		*rsi_queue.o(.text*)
		*rsi_scheduler.o(.text*)
		*rsi_timer.o(.text*)
		*rsi_utils.o(.text*)
		*rsi_wlan.o(.text*)
		*rsi_common_apis.o(.text*) 
		*rsi_wlan_apis.o(.text*)
		*rsi_apis_non_rom.o(.text*)
		*rsi_hal_mcu_timer.o(.text*)
		*rsi_hal_mcu_m4.o(.text*)
		*rsi_hal_mcu_interrupt.o(.text*)
		*rsi_hal_mcu_platform_init.o(.text*)
		*rsi_hal_mcu_m4_rom.o(.text*)
		*rsi_hal_mcu_m4_ram.o(.text*)
		*rsi_apis_rom.o(.text*)
		*rsi_events_rom.o(.text*)
		*rsi_pkt_mgmt_rom.o(.text*)
		*rsi_queue_rom.o(.text*)
		*rsi_scheduler_rom.o(.text*)
		*rsi_socket_rom.o(.text*)
		*rsi_utils_rom.o(.text*)
		*rsi_nwk_rom.o(.text*)
		*rsi_os_wrapper.o(.text*)
		*timers.o(.text*)
		*croutine.o(.text*)
		*event_groups.o(.text*)
		*list.o(.text*)
		*queue.o(.text*)
		*stream_buffer.o(.text*)
		*tasks.o(.text*)
		*heap_4.o(.text*)
		*port.o(.text*)
		*network_sapi_wrapper.o(.text*)
        *rsi_deepsleep_soc.o(.text*)
		{% endif %}
		{% if not EXECUTION_FROM_RAM_PS2 %}
		{% if not EXECUTION_FROM_RAM %}
		*rsi_deepsleep_soc.o(.text*)
		*rsi_hal_mcu_m4_ram.o(.text*)
		{% endif %}
		{% endif %}
		{% if RAM_EXECUTION %}		
		*(.text*)		
		*(.rodata*)
		KEEP(*(.init))
		KEEP(*(.fini))
		{% endif %}
		. = ALIGN(4);
		/* preinit data */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
		
		. = ALIGN(4);
		/* init data */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);
		
		. = ALIGN(4);
		/* finit data */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP(*(SORT(.fini_array.*)))
		KEEP(*(.fini_array))
		PROVIDE_HIDDEN (__fini_array_end = .);
		
		KEEP(*(.jcr*))
		. = ALIGN(4);
		/* All data end */
		__data_end__ = .;
		
		/* _edata is used in coide startup code */
		_edata = __data_end__;
	} > ram AT> rom 
	
	.bss :
	{
		. = ALIGN(4);
		__bss_start__ = .;
		_sbss = __bss_start__;
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		__bss_end__ = .;
		_ebss = __bss_end__;
	} > ram 
		
	/* .stack_dummy section doesn't contains any symbols. It is only
	* used for linker to calculate size of stack sections, and assign
	* values to stack symbols later */
	Co_Stack_Size = 0x3000;	
	.co_stack ALIGN(8) (NOLOAD):
	{
		__co_stackLimit = .;
		KEEP(*(.co_stack*))
		. = ALIGN(4);
		. += Co_Stack_Size;
		__co_stackTop = .;
	} > ram

	StackSize = 0x1400;
	.stack ALIGN(8) (NOLOAD):
	{
		__StackLimit = .;
		KEEP(*(.stack*))
		. = ALIGN(4);
		. += StackSize;
		__StackTop = .;
		PROVIDE(__stack = __StackTop);
	} > ram

       .heap (COPY):
        {
		__HeapBase = .;
		__end__ = .;
		end = __end__;
		_end = __end__;
		KEEP(*(.heap*))
		. = ORIGIN(ram) + LENGTH(ram);
		__HeapLimit = .;
        } > ram
	__heap_size = __HeapLimit - __HeapBase;

{%- if udma_enable %}
	.udma_addr0 :
	{
		*(.udma_addr0*)
	} > udma0 AT> rom 

	.udma_addr1 :
	{
		*(.udma_addr1*)
	} > udma1 AT> rom 
{%- endif %}

{%- if nvm3_enable %}
  __ram_end__ = 0x{{ '%0x' % app_ram_start }} + 0x{{ '%0x' % app_ram_size }};
  __main_flash_end__ = 0x{{ '%0x' % app_flash_start }} + 0x{{ '%0x' % app_flash_size }};
  
	   /* This is where we handle flash storage blocks. We use dummy sections for finding the configured
   * block sizes and then "place" them at the end of flash when the size is known. */
  .internal_storage (DSECT) : {
    KEEP(*(.internal_storage*))
  } > rom
  
  .nvm (DSECT) : {
    KEEP(*(.simee*))
  } > rom

  linker_nvm_end = __main_flash_end__;
  linker_nvm_begin = linker_nvm_end - SIZEOF(.nvm);
  linker_nvm_size = SIZEOF(.nvm);
  linker_storage_end = linker_nvm_begin;
  __nvm3Base = linker_nvm_begin;	
	
  linker_storage_begin = linker_storage_end - SIZEOF(.internal_storage);
  linker_storage_size = SIZEOF(.internal_storage);
  ASSERT((linker_storage_begin >= (__etext + SIZEOF(.data))), "FLASH memory overflowed !")
{%- endif %} 
}