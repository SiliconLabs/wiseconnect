/***************************************************************************//**
 * GCC Linker script for Silicon Labs devices
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

{#-
  Device specific sizes and addresses. These variables describes the physical
  memory of the device.
#}
{%- set sram_addr = device_ram_addr | first %}
{%- set sram_size = device_ram_size | first %}
{%- set flash_addr = device_flash_addr | first %}
{%- set flash_size = device_flash_size | first %}
{%- set flash_page_size = device_flash_page_size | first %}


{%- if psram_present %}
	{%- set psram_addr = device_psram_addr | first %}
	{%- set psram_size = device_psram_size | first %}
{%- endif %}

{%- if udma_enable %}
  {%- set udma0_main_size = udma0_size | sum %}
  {%- set udma0_start_addr = udma0 | sum %}
  {%- set udma1_main_size = udma1_size | sum %}
  {%- set udma1_start_addr = udma1 | sum %}
{%- endif %}

{#-
  Application specific sizes. Here we start to calculate the application view
  of the physical memory.
#}
{%- set app_flash_start = flash_addr %}
{%- set app_flash_end = flash_addr + flash_size %}
{%- set app_ram_start = sram_addr %}
{%- set app_ram_end = sram_addr + sram_size %}

{%- if psram_present %}	
	{%- set app_psram_start = psram_addr %}
	{%- if text_segment_in_psram %}
		{#- Adds 0x1000 offset (4096 in decimal) #}
		{%- set psram_start_offset = 4096 %}
		{%- set app_psram_start = psram_addr + psram_start_offset %}
	{%- endif %}	
	{%- set app_psram_end = psram_addr + psram_size %}
{%- endif %}

{#-
  Calculate application flash and ram size based on start and end address.
#}
{%- set app_flash_size = app_flash_end - app_flash_start %}
{%- set app_ram_size = app_ram_end - app_ram_start %}

{%- if udma_enable %}
  {%- set udma_buffer = udma_buffer | sum %}
  {%- set app_ram_size = app_ram_size - udma_buffer %}
  {%- set udma0_start_addr = app_ram_size %}
  {%- set udma1_start_addr = udma1_start_addr -  udma_buffer%}
{%- endif %}

{%- if psram_present %}	
	{%- set app_psram_size = app_psram_end - app_psram_start %}
{%- endif %}

{%- set rtt = 0 %}
{% if linker_rtt_section is defined %}
{%-   set rtt = 1 %}
{% endif %}

{%- if nvm3_flash_size %}
	{%- set nvm_size = nvm3_size | first%}
	{%- set app_flash_size = app_flash_size - nvm_size %}
{%- endif %}

 MEMORY
 {
   rom   (rx)  : ORIGIN = 0x{{ '%0x' % app_flash_start }}, LENGTH = 0x{{ '%0x' % app_flash_size }}
   ram   (rwx) : ORIGIN = 0x{{ '%0x' % app_ram_start }}, LENGTH = 0x{{ '%0x' % app_ram_size }}
   {%- if psram_present %}
   psram (rwx) : ORIGIN = 0x{{ '%0x' % app_psram_start }}, LENGTH = 0x{{ '%0x' % app_psram_size }}
   {%- endif %}
 }

{%- if udma_enable %}
 MEMORY
 {
   udma0   (rwx)  : ORIGIN = 0x{{ '%0x' % udma0_start_addr }}, LENGTH = 0x{{ '%0x' % udma0_main_size }}
   udma1   (rwx)  : ORIGIN = 0x{{ '%0x' % udma1_start_addr }}, LENGTH = 0x{{ '%0x' % udma1_main_size }}
 }
{%- endif %}

{%- if psram_present and psram_linker_config_enabled %}

_last_psram_location = ORIGIN(psram);
_last_ram_location = ORIGIN(ram);
{%- endif %}

ENTRY(Reset_Handler)
 
SECTIONS
{
	.text :
	{
		KEEP(*(.isr_vector))
		{%- if RAM_EXECUTION %}
		{%- if not ULP_PLATFORM %}
     	KEEP(*(.reset_handler))
		*(EXCLUDE_FILE(*sl_si91x_bus.o *sl_si91x_driver.o *sli_si91x_multithreaded.o *rsi_deepsleep_soc.o *rsi_hal_mcu_m4_ram.o *croutine.o *event_groups.o *list.o *queue.o *stream_buffer.o *tasks.o *timers.o *cmsis_os2.o *freertos_umm_malloc_host.o *port.o *heap_*.o) .text*)
		{%- endif %}
		{%- endif %}
		{% if not RAM_EXECUTION %}	    
        *(.text*)        

		KEEP(*(.init))
		KEEP(*(.fini))
		{%- endif %}
		
		/* .ctors */
		*crtbegin.o(.ctors)
		*crtbegin?.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)
		
		/* .dtors */
		*crtbegin.o(.dtors)
		*crtbegin?.o(.dtors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
		*(SORT(.dtors.*))
		*(.dtors)
		
		{%- if not RAM_EXECUTION %}
		*(.rodata*)
		{%- endif %}
		
		KEEP(*(.eh_fram e*))
	{%- if psram_present and text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{% endif %}	
	
	.ARM.extab : 
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	{%- if psram_present and text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{% endif %}
	
	__exidx_start = .;
	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	{%- if psram_present and text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- else %}			
	} > rom 
	{% endif %} 
	__exidx_end = .;
	__etext = .;
	
	/* _sidata is used in coide startup code */
	_sidata = __etext;
	
	{%- if psram_present and psram_linker_config_enabled %}
			{%- if data_segment_in_psram %}
	. = _last_psram_location;	
			{%- else %}
	. = _last_ram_location;
			{% endif %}
	{% endif %} 
	
	{%- if psram_present and psram_linker_config_enabled %} 	
	.data . :
	{%- else %}
	.data :
	{% endif %}
	{
		__data_start__ = .;
		
		/* _sdata is used in coide startup code */
		_sdata = __data_start__;
		
		{%- if RAM_EXECUTION %}
		{%- if not ULP_PLATFORM %}
		KEEP(*(.ramVector))	
		KEEP(*(.init))
		KEEP(*(.fini))
		*(.rodata*)
		{%- endif %}
		{%- endif %}
		*(vtable)
		*(.data*)
		{%- if ULP_PLATFORM %}
		*(.text*)        
		*(.rodata*)
		KEEP(*(.init))
		KEEP(*(.fini))
		{% endif %}
		{%- if RAM_EXECUTION %}
		{%- if not ULP_PLATFORM %}
		*rsi_hal_mcu_m4_ram.o(.text*)
		*sl_si91x_driver.o(.text*)
		*sl_si91x_bus.o(.text*)
		*sli_si91x_multithreaded.o(.text*)
		*rsi_deepsleep_soc.o(.text*)
		*croutine.o(.text*)
		*event_groups.o(.text*)
		*list.o(.text*)
		*queue.o(.text*)
		*cmsis_os2.o(.text*)
		*stream_buffer.o(.text*)
		*tasks.o(.text*)
		*timers.o(.text*)
		*freertos_umm_malloc_host.o(.text*)
		*port.o(.text*)
		*heap_*.o(.text*)
		{%- endif %}
		{%- endif %}

		. = ALIGN(4);
		/* preinit data */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
		
		. = ALIGN(4);
		/* init data */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);
		
		. = ALIGN(4);
		/* finit data */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP(*(SORT(.fini_array.*)))
		KEEP(*(.fini_array))
		PROVIDE_HIDDEN (__fini_array_end = .);
		
		KEEP(*(.jcr*))
		. = ALIGN(4);
		/* All data end */
		__data_end__ = .;
		
		/* _edata is used in coide startup code */
		_edata = __data_end__;
	{%- if psram_present and data_segment_in_psram and not text_segment_in_psram %}
		_last_psram_location = .;
	} > psram	AT> rom
	{%- elif psram_present and data_segment_in_psram and text_segment_in_psram %}
		_last_psram_location = .;
	} > psram
	{%- elif psram_present and text_segment_in_psram %}	
		_last_ram_location = .;	
	} > ram AT> psram
	{%- elif psram_present and psram_linker_config_enabled %}	
		_last_ram_location = .;	
	} > ram AT> rom
	{%- else %} 
	} > ram AT> rom
	{% endif %}

	{%- if psram_present and psram_linker_config_enabled %}
			{%- if bss_segment_in_psram %}
	. = _last_psram_location;	
			{%- else %}
	. = _last_ram_location;
			{% endif %} 
	{% endif %}	
	
	.bss (NOLOAD) :
	{
		. = ALIGN(4);
		__bss_start__ = .;
		_sbss = __bss_start__;
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		__bss_end__ = .;
		_ebss = __bss_end__;
	{%- if psram_present and bss_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- elif psram_present and psram_linker_config_enabled %}
		_last_ram_location = .;			
	} > ram 
	{%- else %} 
	} > ram 
	{% endif %}
		

	/* .stack_dummy section doesn't contains any symbols. It is only
	* used for linker to calculate size of stack sections, and assign
	* values to stack symbols later */
	{%- if psram_present and psram_linker_config_enabled %}
	. = _last_ram_location;
	{% endif %}
	Co_Stack_Size = 0x3000;	
	.co_stack ALIGN(8) (NOLOAD):
	{
		__co_stackLimit = .;
		KEEP(*(.co_stack*))
		. = ALIGN(4);
		. += Co_Stack_Size;
		__co_stackTop = .;
		{%- if psram_present and psram_linker_config_enabled %}
		_last_ram_location = .;
		{% endif %}
	} > ram

	{%- if psram_present and psram_linker_config_enabled %}
			{%- if stack_segment_in_psram %}
	. = _last_psram_location;	
			{%- else %}
	. = _last_ram_location;
			{% endif %}
	{% endif %}
	StackSize = 0x1400;
	.stack ALIGN(8) (NOLOAD):
	{
		__StackLimit = .;
		KEEP(*(.stack*))
		. = ALIGN(4);
		. += StackSize;
		__StackTop = .;
		PROVIDE(__stack = __StackTop);
	{%- if psram_present and stack_segment_in_psram %}
		_last_psram_location = .;
	} > psram	
	{%- elif psram_present and psram_linker_config_enabled %}	
		_last_ram_location = .;
	} > ram		
	{%- else %}			
	} > ram
	{% endif %}

	{%- if psram_present and psram_linker_config_enabled %}
			{%- if heap_segment_in_psram %}
	. = _last_psram_location;	
			{%- else %}
	. = _last_ram_location;
			{% endif %}
	{% endif %}		
  .heap (COPY):
  {
		__HeapBase = .;
		__end__ = .;
		end = __end__;
		_end = __end__;
		KEEP(*(.heap*))
  		{%- if psram_present and heap_segment_in_psram %}
	  	. = ORIGIN(psram) + LENGTH(psram);	
		{%- else %}	
		. = ORIGIN(ram) + LENGTH(ram);
  		{% endif %}
		__HeapLimit = .;
  {%- if psram_present and heap_segment_in_psram %}
  		_last_psram_location = .;
  } > psram	
  {%- else %}			
  } > ram
  {% endif %}
	__heap_size = __HeapLimit - __HeapBase;

{%- if udma_enable %}
	.udma_addr0 :
	{
		*(.udma_addr0*)
	{%- if psram_present and text_segment_in_psram %}
	} > udma0 AT> psram 
	{%- else %}
	} > udma0 AT> rom
	{% endif %}

	.udma_addr1 :
	{
		*(.udma_addr1*)
	{%- if psram_present and text_segment_in_psram %}
	} > udma1 AT> psram 
	{%- else %}		
	} > udma1 AT> rom 
	{%- endif %}
{%- endif %}	

{%- if nvm3_enable %}
  __ram_end__ = 0x{{ '%0x' % app_ram_start }} + 0x{{ '%0x' % app_ram_size }};
  __main_flash_end__ = 0x{{ '%0x' % app_flash_start }} + 0x{{ '%0x' % app_flash_size }};
  
	   /* This is where we handle flash storage blocks. We use dummy sections for finding the configured
   * block sizes and then "place" them at the end of flash when the size is known. */
  .internal_storage (DSECT) : {
    KEEP(*(.internal_storage*))
  } > rom
  
  .nvm (DSECT) : {
    KEEP(*(.simee*))
  } > rom

  linker_nvm_end = __main_flash_end__;
  linker_nvm_begin = linker_nvm_end - SIZEOF(.nvm);
  linker_nvm_size = SIZEOF(.nvm);
  linker_storage_end = linker_nvm_begin;
  __nvm3Base = linker_nvm_begin;	
	
  linker_storage_begin = linker_storage_end - SIZEOF(.internal_storage);
  linker_storage_size = SIZEOF(.internal_storage);
  ASSERT((linker_storage_begin >= (__etext + SIZEOF(.data))), "FLASH memory overflowed !")
{%- endif %}   
}
